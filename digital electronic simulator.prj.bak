#Version 0.21.1
#Counter: 91
#WinCounter: 5
#BindDebug
#BindIcoName: C:\Users\Gaz\Desktop\GAZ BACKUP\digital electronic simulator\des.ico
#Window 1
#TabInfo
TabText: Layer 0
TabRenamed: 0
TabNumber: 0
TabsetLayer: 0
#Control: Window1
X       : 0
Y       : 0
CX      : 640
CY      : 480
ControlLayer: 0
Title   : Digital Electronic Simulator
Class   : Window
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
BkColor : 0
SystemBkColor : BTNFACE
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 1

#Proc: (General)
include 6502\\6502.e


constant COMPONENT_NUMOFBITS=10
constant COMPONENT_START=0
constant COMPONENT_TARGET=7

sequence component_bits
component_bits=repeat(COMPONENT_START,COMPONENT_NUMOFBITS)

integer component_pos1
component_pos1=COMPONENT_NUMOFBITS

integer component_pos2
component_pos2=COMPONENT_NUMOFBITS

sequence component_result
component_result=repeat(COMPONENT_TARGET,COMPONENT_NUMOFBITS)




include euallegro.ew as allegro
include bits.e
include database.e  -- Euphoria Database System
include reg.ew

integer mouse_event_exit,tx,ty
mouse_event_exit=0
tx=0
ty=0

procedure show_message(sequence msg)
integer ok
ok=message_box(msg,  "info",MB_ICONINFORMATION)
end procedure

integer grid_enable,grid_draw,gridx,gridy
gridx=32
gridy=32
grid_enable=1
grid_draw=0

constant window_titlebar_height = getSystemMetrics ( SM_CYCAPTION )
constant window_menu_height = getSystemMetrics ( SM_CYMENU )
constant window_hscrollbar_width = getSystemMetrics ( SM_CXVSCROLL )
constant window_vscrollbar_height = getSystemMetrics ( SM_CYVSCROLL )
constant window_border_width = getSystemMetrics ( SM_CXFRAME )
constant window_border_height = getSystemMetrics ( SM_CYFRAME )
constant window_toolbar_height = 33


constant window_all_height=window_titlebar_height+window_menu_height+window_toolbar_height+(getSystemMetrics ( SM_CYFRAME )*2)

sequence program_save_name
program_save_name=""

constant ProgramName="Digital Electronic Simulator"
setText(Window1,ProgramName)

function file_exsist(sequence fname)
  integer fn
  fn=open(fname,"r")
  if fn!=-1  then
    close(fn)
  	return 1
  end if
  return 0
end function

function get_file_ext_part(sequence fname)
    for i=length(fname) to 1 by -1 do
    	if fname[i]='.' then
    	   return lower(fname[i+1..length(fname)])
    	end if
    end for
end function

function get_file_path_part(sequence fname)
    for i=length(fname) to 1 by -1 do
    	if fname[i]='\\' then
    		return fname[1..i]
    	end if
    end for
	--return ""
end function

function get_file_name_part(sequence fname)
    for i=length(fname) to 1 by -1 do
    	if fname[i]='\\' then
    	   for j=length(fname) to i by -1 do
    	   	  if fname[j]='.' then
    	   	  	return fname[i+1..j-1]
    	   	  end if
    	   end for
    	   return fname[i+1..length(fname)]
    	end if
    end for
	--return ""
end function

function get_file_fullname_part(sequence fname)
    for i=length(fname) to 1 by -1 do
    	if fname[i]='\\' then
    	   return fname[i+1..length(fname)]
    	end if
    end for
	--return ""
end function

sequence working_d,name
working_d=command_line()
name=get_file_fullname_part(working_d[1])
working_d=get_file_path_part(working_d[1])
--puts(1,name)

if equal(lower(name),"exw.exe") then
	
else
if chdir(working_d) then
else
    puts(1, "Error: No directory?\n")
end if
end if



--NEW 2009 JUNE GARETH
integer draw_lines,draw_ponents
draw_lines=1
draw_ponents=1

function real(sequence string)
sequence temp
temp=value(string)
return temp[2]
end function

procedure centerwindow(integer win)
integer width,height,window_width,window_height
sequence size
    size=getCtlSize(win)
    window_width=size[1]
    window_height=size[2]
    width=w32Func(xGetSystemMetrics,{SM_CXSCREEN})
    height=w32Func(xGetSystemMetrics,{SM_CYSCREEN})
    setRect( win,floor((width/2))-floor((window_width/2)) ,floor((height/2))-floor((window_height/2))-32, window_width, window_height, 0 )
end procedure

function rgb2( integer r, integer g, integer b )
    return makecol(r,g,b)
end function

function remove_line(sequence string, integer line)
sequence temp
integer len
len=length(string)
if line=1 then
  return string[2..len]
elsif line=len then
  return string[1..len-1]
else
  temp=string[1..line-1]
  return temp&string[line+1..len]
end if
end function

sequence key_buffer
key_buffer={}

procedure key_add(integer scancode)
integer found
found=0
  for i=1 to length(key_buffer) do
    if key_buffer[i]=scancode then
      found=1
      exit
    end if
  end for
  if found=0 then
    key_buffer=append(key_buffer,scancode)
  end if
end procedure

procedure key_remove(integer scancode)
  for i=1 to length(key_buffer) do
     if key_buffer[i]=scancode then
       key_buffer=remove_line(key_buffer,i)
       exit
     end if
  end for
end procedure

function key_check(integer scancode)
   for i=1 to length(key_buffer) do
     if key_buffer[i]=scancode then
       return 1
     end if
  end for
  return 0
end function


--================================setup allegro============================--
sequence logicgate_bitmaps,point_bitmaps,onoffswitch_bitmaps,clock_bitmaps,ic_bitmaps,led_bitmaps,pushswitch_bitmaps
atom the_palette
atom buffer
object ret
integer window_width,window_height,workspace_width,workspace_height
integer view_left,view_top
atom color_white,color_black,color_pink,color_green,color_blue,color_red,color_background

led_bitmaps={}
logicgate_bitmaps={}
point_bitmaps={}
onoffswitch_bitmaps={}
ic_bitmaps={}
clock_bitmaps={}
pushswitch_bitmaps={}
buffer=0
window_width=640
window_height=480
workspace_width=4000
workspace_height=4000
view_left=0
view_top=0


procedure startup_allegro()
integer ret
win_set_window(getHWND(Window1))
the_palette = allocate_palette()
if allegro_init()!= 0 then
  puts(1,"init\n")
end if
if install_timer()!= 0 then
  puts(1,"timer\n")
end if
ret=reserve_voices (1, -1)
if install_sound (DIGI_AUTODETECT, MIDI_AUTODETECT, "")!= 0 then
  puts(1,"install sound\n")
end if
set_color_depth(16)
set_palette(the_palette)

color_white=rgb2(255,255,255)
color_black=rgb2(0,0,0)
color_pink=rgb2(255,0,255)
color_green=rgb2(0,255,0)
color_blue=rgb2(0,0,255)
color_red=rgb2(255,0,0)

color_background=color_white--rgb2(239,235,214)

buffer=create_bitmap(window_width,window_height)
clear_to_color(buffer,color_background)

logicgate_bitmaps&=load_bitmap("images\\logic gates\\Gate AND.bmp", the_palette)
logicgate_bitmaps&=load_bitmap("images\\logic gates\\Gate NAND.bmp", the_palette)
logicgate_bitmaps&=load_bitmap("images\\logic gates\\Gate NOT.bmp", the_palette)
logicgate_bitmaps&=load_bitmap("images\\logic gates\\Gate OR.bmp", the_palette)
logicgate_bitmaps&=load_bitmap("images\\logic gates\\Gate NOR.bmp", the_palette)
logicgate_bitmaps&=load_bitmap("images\\logic gates\\Gate XOR.bmp", the_palette)
logicgate_bitmaps&=load_bitmap("images\\logic gates\\Gate XNOR.bmp", the_palette)

point_bitmaps&=load_bitmap("images\\points_0.bmp", the_palette)
point_bitmaps&=load_bitmap("images\\points_1.bmp", the_palette)

onoffswitch_bitmaps&=load_bitmap("images\\onoffswitch_0.bmp", the_palette)
onoffswitch_bitmaps&=load_bitmap("images\\onoffswitch_1.bmp", the_palette)

clock_bitmaps&=load_bitmap("images\\clock_0.bmp", the_palette)
clock_bitmaps&=load_bitmap("images\\clock_1.bmp", the_palette)

ic_bitmaps&=load_bitmap("images\\decade counter, decoder and driver.bmp", the_palette)--1
ic_bitmaps&=load_bitmap("images\\gpu and display.bmp", the_palette)--2
ic_bitmaps&=load_bitmap("images\\cpu.bmp", the_palette)--3
ic_bitmaps&=load_bitmap("images\\jk flip flop.bmp", the_palette)--4
ic_bitmaps&=load_bitmap("images\\keypad.bmp", the_palette)--5
ic_bitmaps&=load_bitmap("images\\fulladder.bmp", the_palette)--6
ic_bitmaps&=load_bitmap("images\\8 bit register.bmp", the_palette)--7
ic_bitmaps&=load_bitmap("images\\3 to 8 decoder.bmp", the_palette)--8
ic_bitmaps&=load_bitmap("images\\BCD to 7-segment display driver.bmp", the_palette)--9

led_bitmaps&=load_bitmap("images\\ledred0.bmp", the_palette)--1
led_bitmaps&=load_bitmap("images\\ledred1.bmp", the_palette)--2

pushswitch_bitmaps&=load_bitmap("images\\push switch 0.bmp", the_palette)
pushswitch_bitmaps&=load_bitmap("images\\push switch 1.bmp", the_palette)
end procedure

procedure close_allegro()
  destroy_palette(the_palette)
  destroy_bitmap(buffer)
  for i=1 to length(led_bitmaps) do
    destroy_bitmap(	led_bitmaps[i] )
  end for
  for i=1 to length(logicgate_bitmaps) do
    destroy_bitmap(	logicgate_bitmaps[i] )
  end for
  for i=1 to length(point_bitmaps) do
    destroy_bitmap(	point_bitmaps[i] )
  end for
  for i=1 to length(onoffswitch_bitmaps) do
    destroy_bitmap(	onoffswitch_bitmaps[i] )
  end for
  for i=1 to length(clock_bitmaps) do
    destroy_bitmap(	clock_bitmaps[i] )
  end for
  for i=1 to length(ic_bitmaps) do
    destroy_bitmap(	ic_bitmaps[i] )
  end for

  allegro_exit()
end procedure

--load_midi
--play_midi(the_music, 1)
--play_sample(the_sample, 255, pan, pitch, 1)
--destroy_midi(the_music)
--buffer=create_bitmap(view_width,view_height)
--destroy_bitmap(buffer)
--load_sample("buzzer.wav")
--destroy_sample(buzzer_sfx)
--load_bitmap("marty.bmp", the_palette)

--================================end setup allegro==========================--


--=========================load config=========================--

--constant Level2MenuItem_133 = createEx( MenuItem, "test", Level2Menu_recent, 0, 0, 0, 0, 0, 0 )

sequence recent_info
recent_info=repeat({"",0},10)

function check_in_recentlist(sequence fname)
  for i=1 to length(recent_info) do
  	if equal(fname,recent_info[i][1]) then
  		return 1
  	end if
  end for
  return 0
end function

procedure check_need_to_remove_from_recentlist()
	for i=1 to length(recent_info) do
	  if length(recent_info[i][1]) then
	    if file_exsist(recent_info[i][1])=0 then
	      recent_info[i][1]=""
	    end if		
	  end if
	end for
end procedure


integer last_exit_code,crash_count
last_exit_code=1-- set to defalut good exit
crash_count=0

constant MAIN_VERSION=1
constant PROGRAM_KEY="HKEY_CURRENT_USER\\SOFTWARE\\Digital Electronic Simulator\\VERSION "&sprint(MAIN_VERSION)&"\\Settings"

procedure load_config()
object data
integer x,y,width,height,max
sequence size

  if regKeyExists(PROGRAM_KEY)=1 then
    width=regQueryValue(PROGRAM_KEY,"FormWidth",780)
    height=regQueryValue(PROGRAM_KEY,"FormHeight",560)
    x=regQueryValue(PROGRAM_KEY,"FormLeft",0)
    y=regQueryValue(PROGRAM_KEY,"FormTop",0)
    max=regQueryValue(PROGRAM_KEY,"FormMaximized",0)
    last_exit_code=regQueryValue(PROGRAM_KEY,"ExitCode",0)
    data=regSetValue(PROGRAM_KEY,"ExitCode",0)--reset to bad exit
    crash_count=regQueryValue(PROGRAM_KEY,"CrashNumber",0)
    for i=1 to length(recent_info) do
      recent_info[i][1]=regQueryValue(PROGRAM_KEY,"Recent"&sprint(i),"")	
    end for

    setCtlPosition(Window1,x,y)
    setCtlSize(Window1,width,height)
    if max=1 then
      setTimer(Window1,1001,1)	
    end if
  else
    width=780
    height=560
    size=getCtlSize(Screen)
    if size[1]<width or size[2]<height then
      puts(1,"need a screen size of at least 800 and 600\n")	
    end if
    x=floor (size[1]/2) - floor(width/2)
    if x<0 then
      x=0	
    end if
    y=floor (size[2]/2) - floor(height/2)
    if y<0 then
      y=0	
    end if
    setCtlPosition(Window1,x,y)
    setCtlSize(Window1,width,height)
    data=regSetValue(PROGRAM_KEY,"FormWidth",width)
    data=regSetValue(PROGRAM_KEY,"FormHeight",height)
    data=regSetValue(PROGRAM_KEY,"FormLeft", x )
    data=regSetValue(PROGRAM_KEY,"FormTop",  y )
    data=regSetValue(PROGRAM_KEY,"FormMaximized",0)
    data=regSetValue(PROGRAM_KEY,"Language",1)
    data=regSetValue(PROGRAM_KEY,"ExitCode",0)
    data=regSetValue(PROGRAM_KEY,"CrashNumber",crash_count)
    for i=1 to length(recent_info) do
      data=regSetValue(PROGRAM_KEY,"Recent"&sprint(i),"")	
    end for
    sleep(3)
  end if

end procedure
load_config()

procedure save_config()
object data
sequence size,pos,size2

    if isMaximized( Window1 ) then
      data=regSetValue(PROGRAM_KEY,"FormMaximized",1)

    else
      if not isMinimized( Window1 ) then
        size=getCtlSize(Window1)
        pos=getPosition(Window1)
      	data=regSetValue(PROGRAM_KEY,"FormWidth",size[1])
        data=regSetValue(PROGRAM_KEY,"FormHeight",size[2])
        size2=getCtlSize(Screen)
        if pos[1]<0 or pos[1]>size2[1] then
          pos[1]=0
        end if
        if pos[2]<0 or pos[2]>size2[2] then
          pos[2]=0	
        end if
        data=regSetValue(PROGRAM_KEY,"FormLeft",pos[1])
        data=regSetValue(PROGRAM_KEY,"FormTop",pos[2])
      end if
      data=regSetValue(PROGRAM_KEY,"FormMaximized",0)
      data=regSetValue(PROGRAM_KEY,"CrashNumber",crash_count)
    end if
    data=regSetValue(PROGRAM_KEY,"ExitCode",1)--reset to good exit
    for i=1 to length(recent_info) do
      data=regSetValue(PROGRAM_KEY,"Recent"&sprint(i),recent_info[i][1])	
    end for
end procedure

--=======================end load config=========================--


--=======================error handlering========================--


--crash_file(working_d&"log\\err"&sprint(crash_count)&".txt")

--crash_message("An unexpected error has occurred!\n" &
--              "Please contact gaz.com\n" &
--              "Do not delete the file \"ex.err\".\n")

if last_exit_code=0 then
  crash_count+=1
  ret=regSetValue(PROGRAM_KEY,"CrashNumber",crash_count)
  puts(1,"Program crash last time it woz used sorry\n")	
end if
--=======================end error handlering========================--




--================================point functions============================--

integer mouse_x,mouse_y,start_x,start_y,mouse_button
integer mousex,mousey--include view position
mouse_x=0
mouse_y=0
start_x=0
start_y=0
mousex=0
mousey=0
mouse_button=0

integer islinking,point_handle,linemode,point_type,point_selected,running
islinking=0
point_handle=0
point_selected=0
point_type=0
linemode=0
running=0


constant point_width=8
constant point_height=8

constant point_halfw=floor(point_width/2)
constant point_halfh=floor(point_height/2)

constant point_input_type=1
constant point_output_type=2


constant POINT_X=1
constant POINT_Y=2
constant POINT_STATE=3
constant POINT_TYPE=4
constant POINT_SELECTED=5
constant POINT_WIRE_SELECTED=6
constant POINT_PARENT_ID=7
constant POINT_COUNTER=8
constant POINT_LINKLIST=9
constant POINT_FREE_LINKLIST=10
constant POINT_SIZEOF=10

constant empty_handle=-1

sequence points_list,points_free_list
points_list={}
points_free_list={}


sequence point_signal_list
point_signal_list={}

function size_signal_list()
	return length(point_signal_list)
end function

function pop_signal_list()
object temp
  if length(point_signal_list)>1 then
    temp=point_signal_list[1]
    point_signal_list=point_signal_list[2..length(point_signal_list)]
    return temp
  else
    temp=point_signal_list[1]
    point_signal_list={}
    return temp
  end if
end function

procedure push_signal_list(object val)
  point_signal_list=append(point_signal_list,val)
end procedure

procedure send_signal(integer point_index,integer state)
  if points_list[point_index][POINT_STATE]!=state then
  	push_signal_list({point_index,state})
  end if
end procedure


function point_create( integer x, integer y )
  integer handle
  if length( points_free_list ) then
    handle = points_free_list[1]
    points_free_list = points_free_list[2..length(points_free_list)]
  else
    points_list = append( points_list, repeat( 0, POINT_SIZEOF ) )
    handle = length( points_list )
  end if

  points_list[handle]=repeat( 0, POINT_SIZEOF )
  points_list[handle][POINT_X] = x
  points_list[handle][POINT_Y] = y
  points_list[handle][POINT_STATE] = 0
  points_list[handle][POINT_TYPE] = 0
  points_list[handle][POINT_SELECTED] = 0
  points_list[handle][POINT_WIRE_SELECTED] = 1
  points_list[handle][POINT_PARENT_ID] = 0
  points_list[handle][POINT_COUNTER] =0
  points_list[handle][POINT_LINKLIST] = {}
  points_list[handle][POINT_FREE_LINKLIST] = {}

  return handle	
end function


--====================================new 2010===========================--
-- all this is for a automated circut desinger

function point_get_number_oftypes()
integer type1,type2

  type1=0
  type2=0

  for i=1 to length(points_list) do
    if length(points_list[i]) then

      if points_list[i][POINT_TYPE]=point_input_type then
        type1+=1
      elsif points_list[i][POINT_TYPE]=point_output_type then
      	type2+=1	
      end if
      	
    end if
  end for

  return {type1,type2}
end function

function point_get_list_oftypes()
sequence type1,type2

  type1={}
  type2={}

  for i=1 to length(points_list) do
    if length(points_list[i]) then

      if points_list[i][POINT_TYPE]=point_input_type then
        type1&=i
      elsif points_list[i][POINT_TYPE]=point_output_type then
      	type2&=i	
      end if
      	
    end if
  end for

  return {type1,type2}
end function
--====================================end new 2010===========================--


function point_mouse_over(integer mx,integer my)
integer x,y
  for i=1 to length(points_list) do
    if length(points_list[i]) then
      x=points_list[i][POINT_X]-view_left
      y=points_list[i][POINT_Y]-view_top
  	  if mx>=x and mx<=x+point_width then
  	    if my>=y and my<=y+point_height then
  	      return i	
  	    end if
  	  end if	
    end if
  end for
  return 0
end function

function points_are_linked(integer point_handle,integer index)
  for i=1 to length(points_list[point_handle][POINT_LINKLIST]) do
    if points_list[point_handle][POINT_LINKLIST][i]!=empty_handle then
      if points_list[point_handle][POINT_LINKLIST][i]=index then
        return 1
      end if
    end if	
  end for

  return 0
end function

procedure points_connect(integer point_handle,integer index)
  integer handle
  if length(points_list[point_handle][POINT_FREE_LINKLIST]) then
    handle=points_list[point_handle][POINT_FREE_LINKLIST][1]
    points_list[point_handle][POINT_FREE_LINKLIST]=points_list[point_handle][POINT_FREE_LINKLIST][2..length(points_list[point_handle][POINT_FREE_LINKLIST])]
    points_list[point_handle][POINT_LINKLIST][handle]=index
  else
    points_list[point_handle][POINT_LINKLIST]=append(points_list[point_handle][POINT_LINKLIST],index)
  end if

  if length(points_list[index][POINT_FREE_LINKLIST]) then
    handle=points_list[index][POINT_FREE_LINKLIST][1]
    points_list[index][POINT_FREE_LINKLIST]=points_list[index][POINT_FREE_LINKLIST][2..length(points_list[index][POINT_FREE_LINKLIST])]
    points_list[index][POINT_LINKLIST][handle]=point_handle
  else
	points_list[index][POINT_LINKLIST]=append(points_list[index][POINT_LINKLIST],point_handle)
  end if 	

end procedure

function points_check_linklist_empty(integer point_handle)
  for i=1 to length(points_list[point_handle][POINT_LINKLIST]) do
	if points_list[point_handle][POINT_LINKLIST][i]!=empty_handle then
	  return 0
	end if	
  end for
  return 1
end function

procedure points_delete_selected_wire(integer point_handle)
  integer index,other_point_handle

    index=points_list[point_handle][POINT_WIRE_SELECTED]

  	points_list[point_handle][POINT_FREE_LINKLIST]=append(points_list[point_handle][POINT_FREE_LINKLIST], index )
  	other_point_handle=points_list[point_handle][POINT_LINKLIST][index]
  	points_list[point_handle][POINT_LINKLIST][index]=empty_handle
  	
    for i=1 to length(points_list[other_point_handle][POINT_LINKLIST]) do
       if points_list[other_point_handle][POINT_LINKLIST][i]=point_handle then
       	 points_list[other_point_handle][POINT_FREE_LINKLIST]=append(points_list[other_point_handle][POINT_FREE_LINKLIST], i )
       	 points_list[other_point_handle][POINT_LINKLIST][i]=empty_handle
       	 if points_check_linklist_empty(other_point_handle)=1 then
           points_list[other_point_handle][POINT_WIRE_SELECTED]=1
           points_list[other_point_handle][POINT_LINKLIST]={}
           points_list[other_point_handle][POINT_FREE_LINKLIST]={}
         else
           while 1 do
             points_list[other_point_handle][POINT_WIRE_SELECTED]-=1
             if points_list[other_point_handle][POINT_WIRE_SELECTED]<1 then
              points_list[other_point_handle][POINT_WIRE_SELECTED]=length(points_list[other_point_handle][POINT_LINKLIST])
             end if

             if points_list[other_point_handle][POINT_LINKLIST][ points_list[other_point_handle][POINT_WIRE_SELECTED] ]!=empty_handle then
               exit
             end if
           end while
         end if
       	 exit
       end if	
    end for

    if points_check_linklist_empty(point_handle)=1 then
      points_list[point_handle][POINT_WIRE_SELECTED]=1
      points_list[point_handle][POINT_LINKLIST]={}
      points_list[point_handle][POINT_FREE_LINKLIST]={}
    else
      while 1 do
        points_list[point_handle][POINT_WIRE_SELECTED]-=1
        if points_list[point_handle][POINT_WIRE_SELECTED]<1 then
          points_list[point_handle][POINT_WIRE_SELECTED]=length(points_list[point_handle][POINT_LINKLIST])
        end if

        if points_list[point_handle][POINT_LINKLIST][ points_list[point_handle][POINT_WIRE_SELECTED] ]!=empty_handle then
          exit
        end if
      end while
    end if
end procedure

procedure points_delete_all_connections(integer point_handle)
  integer other_point_handle
	for i=1 to length(points_list[point_handle][POINT_LINKLIST]) do
	  other_point_handle=points_list[point_handle][POINT_LINKLIST][i]
	  if other_point_handle!=empty_handle then
	   for j=1 to length(points_list[other_point_handle][POINT_LINKLIST]) do
	   	   if points_list[other_point_handle][POINT_LINKLIST][j]=point_handle then
       	     points_list[other_point_handle][POINT_FREE_LINKLIST]=append(points_list[other_point_handle][POINT_FREE_LINKLIST], j )
       	     points_list[other_point_handle][POINT_LINKLIST][j]=empty_handle
       	     if points_check_linklist_empty(other_point_handle)=1 then
               points_list[other_point_handle][POINT_WIRE_SELECTED]=1
               points_list[other_point_handle][POINT_LINKLIST]={}
               points_list[other_point_handle][POINT_FREE_LINKLIST]={}
             else
               while 1 do
                 points_list[other_point_handle][POINT_WIRE_SELECTED]-=1
                 if points_list[other_point_handle][POINT_WIRE_SELECTED]<1 then
                   points_list[other_point_handle][POINT_WIRE_SELECTED]=length(points_list[other_point_handle][POINT_LINKLIST])
                 end if

                 if points_list[other_point_handle][POINT_LINKLIST][ points_list[other_point_handle][POINT_WIRE_SELECTED] ]!=empty_handle then
                   exit
                 end if
               end while
             end if
       	     exit
           end if
	   end for
	  end if
    end for

   points_list[point_handle][POINT_WIRE_SELECTED]=1
   points_list[point_handle][POINT_LINKLIST]={}
   points_list[point_handle][POINT_FREE_LINKLIST]={}
end procedure

procedure point_delete( integer handle )
  if point_selected=handle then
  	point_selected=0
  end if
  points_delete_all_connections(handle)
  points_list[handle]={}
  points_free_list = append( points_free_list, handle )	
end procedure

procedure points_set_selected(integer point_handle,integer v)
	for i=1 to length(points_list) do
      if length(points_list[i]) then
        points_list[i][POINT_SELECTED]=0
      end if
    end for
    if v then
      point_selected=point_handle
    else
	  point_selected=0
    end if
    points_list[point_handle][POINT_SELECTED]=v
end procedure

procedure points_reset_counter()
	for i=1 to length(points_list) do
      if length(points_list[i]) then
        points_list[i][POINT_COUNTER]=0
      end if
    end for
end procedure

procedure points_reset_state()
	for i=1 to length(points_list) do
      if length(points_list[i]) then
        points_list[i][POINT_STATE]=0
      end if
    end for
end procedure

procedure points_draw()
integer x,y,halfw,halfh
sequence links

  for i=1 to length(points_list) do
    if length(points_list[i]) then
      x=points_list[i][POINT_X]-view_left
      y=points_list[i][POINT_Y]-view_top
      if points_list[i][POINT_STATE] then
        draw_sprite(buffer,point_bitmaps[2],x, y)
      else
        draw_sprite(buffer,point_bitmaps[1],x, y)
      end if

      --debug allegro:textout_ex(buffer,font, sprint(i) ,x , y+12 , color_blue,-1 )

if draw_lines=1 then
     if running=0 then	

      links=points_list[i][POINT_LINKLIST]  	

      for j=1 to length(links) do
        if links[j]!=empty_handle then
          allegro:line(buffer, x+point_halfw , y+point_halfh, points_list[ links[j] ][POINT_X]+point_halfw-view_left, points_list[ links[j] ][POINT_Y]+point_halfh-view_top, color_blue)
          --allegro:textout_ex(buffer,font, sprint(links[j]) ,x , (y+12)+(18*j)-18 , color_blue,-1 )	
        end if
      end for

     elsif running=1 then
     	
       links=points_list[i][POINT_LINKLIST]  	

      for j=1 to length(links) do
        if links[j]!=empty_handle then
          if points_list[i][POINT_STATE] then
            allegro:line(buffer, x+point_halfw , y+point_halfh, points_list[ links[j] ][POINT_X]+point_halfw-view_left, points_list[ links[j] ][POINT_Y]+point_halfh-view_top, color_red)
          else
	        allegro:line(buffer, x+point_halfw , y+point_halfh, points_list[ links[j] ][POINT_X]+point_halfw-view_left, points_list[ links[j] ][POINT_Y]+point_halfh-view_top, color_blue)
          end if

          --allegro:textout_ex(buffer,font, sprint(links[j]) ,x , (y+12)+(18*j)-18 , color_blue,-1 )	
        end if
      end for

     end if
end if

    end if
  end for

  if point_selected and running=0 then
    x=points_list[point_selected][POINT_X]-view_left
    y=points_list[point_selected][POINT_Y]-view_top

    allegro:ellipse(buffer, x+point_halfw , y+point_halfh, point_width , point_height, color_blue)

    links=points_list[point_selected][POINT_LINKLIST]  	

    for j=1 to length(links) do
      if links[j]!=empty_handle then
	
	   if points_list[point_selected][POINT_WIRE_SELECTED]=j then
         allegro:line(buffer, x+point_halfw , y+point_halfh, points_list[ links[j] ][POINT_X]+point_halfw-view_left, points_list[ links[j] ][POINT_Y]+point_halfh-view_top, color_red)
         exit
       end if

      end if
    end for

  end if
end procedure


procedure point_selected_keypress_event(integer scancode)

 if point_selected and length(points_list[point_selected][POINT_LINKLIST]) then
 	
   if scancode=VK_LEFT then
     while 1 do
       points_list[point_selected][POINT_WIRE_SELECTED]-=1
       if points_list[point_selected][POINT_WIRE_SELECTED]<1 then
         points_list[point_selected][POINT_WIRE_SELECTED]=length(points_list[point_selected][POINT_LINKLIST])
       end if

       if points_list[point_selected][POINT_LINKLIST][ points_list[point_selected][POINT_WIRE_SELECTED] ]!=empty_handle then
       	 exit
       end if
     end while

   elsif scancode=VK_RIGHT then
   	 while 1 do
       points_list[point_selected][POINT_WIRE_SELECTED]+=1
       if points_list[point_selected][POINT_WIRE_SELECTED]>length(points_list[point_selected][POINT_LINKLIST]) then
         points_list[point_selected][POINT_WIRE_SELECTED]=1
       end if

       if points_list[point_selected][POINT_LINKLIST][ points_list[point_selected][POINT_WIRE_SELECTED] ]!=empty_handle then
       	 exit
       end if
     end while
   elsif scancode=VK_DELETE then
     points_delete_selected_wire(point_selected)	
     islinking=0
   elsif scancode=VK_END then
     points_delete_all_connections(point_selected)
     islinking=0
   end if

   setTimer(CWindow1,1001,0)
 end if
end procedure
--==============================end point functions==========================--






--================================compoent setup=============================--

sequence compoent_execute_list
compoent_execute_list={}

function size_compoent_execute_list()
	return length(compoent_execute_list)
end function

function pop_compoent_execute_list()
object temp
  if length(compoent_execute_list)>1 then
    temp=compoent_execute_list[1]
    compoent_execute_list=compoent_execute_list[2..length(compoent_execute_list)]
    return temp
  else
    temp=compoent_execute_list[1]
    compoent_execute_list={}
    return temp
  end if
end function

procedure push_compoent_execute_list(object val)
  compoent_execute_list=append(compoent_execute_list,val)
end procedure


sequence compoent_list
compoent_list={}

integer compoent_popup_handle,compoent_popup_command
compoent_popup_handle=0
compoent_popup_command=0

constant
    Init_Method = 1,
    Mouse_Method = 2,
    Step_Method = 3,
    Draw_Method = 4

constant Methods = 4

constant
    SuperClass  = 1,
    Method      = 2,
    Attributes  = 3,
    SizeOfClass = 3,
    Class = 1

sequence
    classes
    classes = {}

function createclass( integer Superclass )

    sequence new

    new = repeat( 0, SizeOfClass )

    new[ SuperClass ]   = Superclass
    new[ Method ]       = repeat( -1, Methods )

    if Superclass then
	  new[ Attributes ] = classes[Superclass][Attributes]
    else
	  new[ Attributes ] = 1
    end if

    if Superclass then
	  new[ Method ] = classes[Superclass][Method]
    end if

    classes = append( classes, new )

    return length( classes )

end function

function classvaraible()
   integer thisClass, count
   thisClass = length( classes )
   count = classes[thisClass][Attributes]
   count +=1
   classes[thisClass][Attributes] = count
   return count
end function


procedure SetMethod( integer class, integer method, integer routine )
    classes[class][Method][method] = routine
    if routine = -1 then
	  puts( 1, "Error: Assigning undefined function to method.\n" )
	  ? 1/0
    end if
end procedure


constant
    Compoent = createclass( 0 ),
    XPosition = classvaraible(),
    YPosition = classvaraible(),
    TextName   = classvaraible()

procedure initCompoent( integer handle )
  compoent_list[handle][XPosition]  = 0
  compoent_list[handle][YPosition]  = 0
  compoent_list[handle][TextName]   = ""
end procedure

SetMethod( Compoent, Init_Method, routine_id("initCompoent") )

function compoent_create( integer class, integer x, integer y )

    integer handle, routineId, priorId
    sequence inits

    handle = 0
    for i = 1 to length( compoent_list ) do
	  if length( compoent_list[i] ) = 0 then
	      handle = i
	      exit
	  end if
    end for

    if handle = 0 then
	  compoent_list = append( compoent_list, 0 )
	  handle = length( compoent_list )
    end if

    compoent_list[handle] = repeat( 0, classes[class][Attributes] )
    compoent_list[handle][Class] = class

    inits = {}
    priorId = -1
    routineId = classes[class][Method][Init_Method]

    while 1 do

	  if  routineId != -1 and routineId != priorId then
	    inits = prepend( inits, routineId )
	    priorId = routineId
	  end if
	
	  class = classes[class][SuperClass]
	  if class = 0 then
	    exit
	  end if
	
	  routineId = classes[class][Method][Init_Method]

    end while

    for i = 1 to length( inits ) do
	  call_proc( inits[i], {handle} )
	  --dirt hack gaz
	  compoent_list[handle][XPosition]  = x
      compoent_list[handle][YPosition]  = y
    end for


    return handle

end function


constant
    JKflipflop         = createclass( Compoent ),
    JKflipflop_Input1  = classvaraible(),
    JKflipflop_Input2  = classvaraible(),
    JKflipflop_Input3  = classvaraible(),
    JKflipflop_Output1 = classvaraible(),
    JKflipflop_Output2 = classvaraible(),
    JKflipflop_Select  = classvaraible(),
    JKflipflop_Move    = classvaraible()

procedure initJKflipflop( integer handle )
  integer x,y,input1,input2,input3,output1,output2

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][TextName]="JK-flip-flop"
  compoent_list[handle][JKflipflop_Input1]  = point_create( x, y+12 )
  compoent_list[handle][JKflipflop_Input2]  = point_create( x, y+30 )
  compoent_list[handle][JKflipflop_Input3]  = point_create( x, y+30 )

  compoent_list[handle][JKflipflop_Output1] = point_create( x+42, y+22 )
  compoent_list[handle][JKflipflop_Output2] = point_create( x+42, y+22 )
  compoent_list[handle][JKflipflop_Move]    = 1

  input1=compoent_list[handle][JKflipflop_Input1]
  input2=compoent_list[handle][JKflipflop_Input2]
  input3=compoent_list[handle][JKflipflop_Input3]
  output1=compoent_list[handle][JKflipflop_Output1]
  output2=compoent_list[handle][JKflipflop_Output2]

  points_list[input1][POINT_TYPE]=point_input_type
  points_list[input2][POINT_TYPE]=point_input_type
  points_list[input3][POINT_TYPE]=point_input_type
  points_list[output1][POINT_TYPE]=point_output_type
  points_list[output2][POINT_TYPE]=point_output_type

  points_list[input1][POINT_PARENT_ID]=handle
  points_list[input2][POINT_PARENT_ID]=handle
  points_list[input3][POINT_PARENT_ID]=handle
  points_list[output1][POINT_PARENT_ID]=handle
  points_list[output2][POINT_PARENT_ID]=handle


  setTimer(CWindow1,1001,0)
end procedure

SetMethod( JKflipflop, Init_Method, routine_id("initJKflipflop") )

procedure mouseJKflipflop(integer handle)

  integer input1,input2,input3,output1,output2,offsetx,offsety
  if compoent_list[handle][JKflipflop_Move]  then
    offsetx=25
    offsety=25
  	
    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    input1=compoent_list[handle][JKflipflop_Input1]
    input2=compoent_list[handle][JKflipflop_Input2]
    input3=compoent_list[handle][JKflipflop_Input3]
    output1=compoent_list[handle][JKflipflop_Output1]
    output2=compoent_list[handle][JKflipflop_Output2]

    points_list[input1][POINT_X] = mousex
    points_list[input1][POINT_Y] = mousey+24
    points_list[input2][POINT_X] = mousex
    points_list[input2][POINT_Y] = mousey+60
    points_list[input3][POINT_X] = mousex
    points_list[input3][POINT_Y] = mousey+96

    points_list[output1][POINT_X] = mousex+100
    points_list[output1][POINT_Y] = mousey+24
    points_list[output2][POINT_X] = mousex+100
    points_list[output2][POINT_Y] = mousey+96

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][JKflipflop_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+100 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+115 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][JKflipflop_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][JKflipflop_Input1])
          point_delete(compoent_list[handle][JKflipflop_Input2])
          point_delete(compoent_list[handle][JKflipflop_Input3])
          point_delete(compoent_list[handle][JKflipflop_Output1])
          point_delete(compoent_list[handle][JKflipflop_Output2])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( JKflipflop, Mouse_Method, routine_id("mouseJKflipflop") )


procedure stepJKflipflop(integer handle)
  integer input1,input2,input3,output1,output2,select

  input1=compoent_list[handle][JKflipflop_Input1]
  input2=compoent_list[handle][JKflipflop_Input2]
  input3=compoent_list[handle][JKflipflop_Input3]
  output1=compoent_list[handle][JKflipflop_Output1]
  output2=compoent_list[handle][JKflipflop_Output2]

  select=compoent_list[handle][JKflipflop_Select]

   if points_list[input1][POINT_STATE]=1 and points_list[input3][POINT_STATE]=1 then --j and k set
     if points_list[input2][POINT_STATE]=1 then --clock high
       select=1
       compoent_list[handle][JKflipflop_Select]=select
     else
       if select=1 then
       	 select=0
         compoent_list[handle][JKflipflop_Select]=select
         if points_list[output1][POINT_STATE]=0 then
           send_signal(output1,1)
           send_signal(output2,0)
         else
           send_signal(output1,0)
           send_signal(output2,1)
         end if
       end if
     end if
   elsif points_list[input1][POINT_STATE]=1 and points_list[input3][POINT_STATE]=0 then

     if points_list[input2][POINT_STATE]=1 then --clock high
       select=1
       compoent_list[handle][JKflipflop_Select]=select
     else
       if select=1 then
       	 select=0
         compoent_list[handle][JKflipflop_Select]=select
         send_signal(output1,0)
         send_signal(output2,1)
       end if
     end if

   elsif points_list[input1][POINT_STATE]=0 and points_list[input3][POINT_STATE]=1 then

     if points_list[input2][POINT_STATE]=1 then --clock high
       select=1
       compoent_list[handle][JKflipflop_Select]=select
     else
       if select=1 then
       	 select=0
         compoent_list[handle][JKflipflop_Select]=select
         send_signal(output1,1)
         send_signal(output2,0)
       end if
     end if

   elsif points_list[input1][POINT_STATE]=0 and points_list[input3][POINT_STATE]=0 then
     --send_signal(output1,0)
     --send_signal(output2,1)
   end if

end procedure

SetMethod( JKflipflop, Step_Method, routine_id("stepJKflipflop") )

procedure drawJKflipflop( integer handle )
  draw_sprite(buffer,ic_bitmaps[4],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( JKflipflop, Draw_Method, routine_id("drawJKflipflop") )


constant
    DecadeCounterDecoderDriver         = createclass( Compoent ),
    DecadeCounterDecoderDriver_Input1  = classvaraible(),
    DecadeCounterDecoderDriver_Input2  = classvaraible(),
    DecadeCounterDecoderDriver_Input3  = classvaraible(),
    DecadeCounterDecoderDriver_Input4  = classvaraible(),
    DecadeCounterDecoderDriver_Output1 = classvaraible(),
    DecadeCounterDecoderDriver_Output2 = classvaraible(),
    DecadeCounterDecoderDriver_Output3 = classvaraible(),
    DecadeCounterDecoderDriver_Output4 = classvaraible(),
    DecadeCounterDecoderDriver_Output5 = classvaraible(),
    DecadeCounterDecoderDriver_Output6 = classvaraible(),
    DecadeCounterDecoderDriver_Output7 = classvaraible(),
    DecadeCounterDecoderDriver_Output8 = classvaraible(),
    DecadeCounterDecoderDriver_Output9 = classvaraible(),
    DecadeCounterDecoderDriver_Output10 = classvaraible(),
    DecadeCounterDecoderDriver_Count = classvaraible(),
    DecadeCounterDecoderDriver_Clocked = classvaraible(),
    DecadeCounterDecoderDriver_Reseted = classvaraible(),
    DecadeCounterDecoderDriver_Move    = classvaraible()

procedure initDecadeCounterDecoderDriver( integer handle )
  integer x,y,input1,input2,input3,input4,output1,output2,output3,output4,output5,output6,output7,output8,output9,output10

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][TextName]="Decade Count, Decode and Driver"
  compoent_list[handle][DecadeCounterDecoderDriver_Input1]  = point_create( x, y+12 )
  compoent_list[handle][DecadeCounterDecoderDriver_Input2]  = point_create( x, y+30 )
  compoent_list[handle][DecadeCounterDecoderDriver_Input3]  = point_create( x, y+12 )
  compoent_list[handle][DecadeCounterDecoderDriver_Input4]  = point_create( x, y+30 )

  compoent_list[handle][DecadeCounterDecoderDriver_Output1] = point_create( x+42, y+22 )
  compoent_list[handle][DecadeCounterDecoderDriver_Output2] = point_create( x+42, y+22 )
  compoent_list[handle][DecadeCounterDecoderDriver_Output3] = point_create( x+42, y+22 )
  compoent_list[handle][DecadeCounterDecoderDriver_Output4] = point_create( x+42, y+22 )
  compoent_list[handle][DecadeCounterDecoderDriver_Output5] = point_create( x+42, y+22 )
  compoent_list[handle][DecadeCounterDecoderDriver_Output6] = point_create( x+42, y+22 )
  compoent_list[handle][DecadeCounterDecoderDriver_Output7] = point_create( x+42, y+22 )
  compoent_list[handle][DecadeCounterDecoderDriver_Output8] = point_create( x+42, y+22 )
  compoent_list[handle][DecadeCounterDecoderDriver_Output9] = point_create( x+42, y+22 )
  compoent_list[handle][DecadeCounterDecoderDriver_Output10] = point_create( x+42, y+22 )

  compoent_list[handle][DecadeCounterDecoderDriver_Move]    = 1

  compoent_list[handle][DecadeCounterDecoderDriver_Count] =0
  compoent_list[handle][DecadeCounterDecoderDriver_Clocked] = 0
  compoent_list[handle][DecadeCounterDecoderDriver_Reseted] = 0

  input1=compoent_list[handle][DecadeCounterDecoderDriver_Input1]
  input2=compoent_list[handle][DecadeCounterDecoderDriver_Input2]
  input3=compoent_list[handle][DecadeCounterDecoderDriver_Input3]
  input4=compoent_list[handle][DecadeCounterDecoderDriver_Input4]
  output1=compoent_list[handle][DecadeCounterDecoderDriver_Output1]
  output2=compoent_list[handle][DecadeCounterDecoderDriver_Output2]
  output3=compoent_list[handle][DecadeCounterDecoderDriver_Output3]
  output4=compoent_list[handle][DecadeCounterDecoderDriver_Output4]
  output5=compoent_list[handle][DecadeCounterDecoderDriver_Output5]
  output6=compoent_list[handle][DecadeCounterDecoderDriver_Output6]
  output7=compoent_list[handle][DecadeCounterDecoderDriver_Output7]
  output8=compoent_list[handle][DecadeCounterDecoderDriver_Output8]
  output9=compoent_list[handle][DecadeCounterDecoderDriver_Output9]
  output10=compoent_list[handle][DecadeCounterDecoderDriver_Output10]

  points_list[input1][POINT_TYPE]=point_input_type
  points_list[input2][POINT_TYPE]=point_input_type
  points_list[input3][POINT_TYPE]=point_input_type
  points_list[input4][POINT_TYPE]=point_input_type

  points_list[output1][POINT_TYPE]=point_output_type
  points_list[output2][POINT_TYPE]=point_output_type
  points_list[output3][POINT_TYPE]=point_output_type
  points_list[output4][POINT_TYPE]=point_output_type
  points_list[output5][POINT_TYPE]=point_output_type
  points_list[output6][POINT_TYPE]=point_output_type
  points_list[output7][POINT_TYPE]=point_output_type
  points_list[output8][POINT_TYPE]=point_output_type
  points_list[output9][POINT_TYPE]=point_output_type
  points_list[output10][POINT_TYPE]=point_output_type

  points_list[input1][POINT_PARENT_ID]=handle
  points_list[input2][POINT_PARENT_ID]=handle
  points_list[input3][POINT_PARENT_ID]=handle
  points_list[input4][POINT_PARENT_ID]=handle

  points_list[output1][POINT_PARENT_ID]=handle
  points_list[output2][POINT_PARENT_ID]=handle
  points_list[output3][POINT_PARENT_ID]=handle
  points_list[output4][POINT_PARENT_ID]=handle
  points_list[output5][POINT_PARENT_ID]=handle
  points_list[output6][POINT_PARENT_ID]=handle
  points_list[output7][POINT_PARENT_ID]=handle
  points_list[output8][POINT_PARENT_ID]=handle
  points_list[output9][POINT_PARENT_ID]=handle
  points_list[output10][POINT_PARENT_ID]=handle

  setTimer(CWindow1,1001,0)
end procedure

SetMethod( DecadeCounterDecoderDriver, Init_Method, routine_id("initDecadeCounterDecoderDriver") )

procedure mouseDecadeCounterDecoderDriver(integer handle)

  integer input1,input2,input3,input4,output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,offsetx,offsety
  if compoent_list[handle][DecadeCounterDecoderDriver_Move]  then
    offsetx=25
    offsety=25

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    input1=compoent_list[handle][DecadeCounterDecoderDriver_Input1]
    input2=compoent_list[handle][DecadeCounterDecoderDriver_Input2]
    input3=compoent_list[handle][DecadeCounterDecoderDriver_Input3]
    input4=compoent_list[handle][DecadeCounterDecoderDriver_Input4]

    output1=compoent_list[handle][DecadeCounterDecoderDriver_Output1]
    output2=compoent_list[handle][DecadeCounterDecoderDriver_Output2]
    output3=compoent_list[handle][DecadeCounterDecoderDriver_Output3]
    output4=compoent_list[handle][DecadeCounterDecoderDriver_Output4]
    output5=compoent_list[handle][DecadeCounterDecoderDriver_Output5]
    output6=compoent_list[handle][DecadeCounterDecoderDriver_Output6]
    output7=compoent_list[handle][DecadeCounterDecoderDriver_Output7]
    output8=compoent_list[handle][DecadeCounterDecoderDriver_Output8]
    output9=compoent_list[handle][DecadeCounterDecoderDriver_Output9]
    output10=compoent_list[handle][DecadeCounterDecoderDriver_Output10]

    points_list[input1][POINT_X] = mousex-4
    points_list[input1][POINT_Y] = mousey+6
    points_list[input2][POINT_X] = mousex-4
    points_list[input2][POINT_Y] = mousey+24
    points_list[input3][POINT_X] = mousex-4
    points_list[input3][POINT_Y] = mousey+34
    points_list[input4][POINT_X] = mousex-4
    points_list[input4][POINT_Y] = mousey+102

    points_list[output1][POINT_X] = mousex+48
    points_list[output1][POINT_Y] = mousey+6
    points_list[output2][POINT_X] = mousex+48
    points_list[output2][POINT_Y] = mousey+16
    points_list[output3][POINT_X] = mousex+48
    points_list[output3][POINT_Y] = mousey+26
    points_list[output4][POINT_X] = mousex+48
    points_list[output4][POINT_Y] = mousey+36
    points_list[output5][POINT_X] = mousex+48
    points_list[output5][POINT_Y] = mousey+46
    points_list[output6][POINT_X] = mousex+48
    points_list[output6][POINT_Y] = mousey+56
    points_list[output7][POINT_X] = mousex+48
    points_list[output7][POINT_Y] = mousey+66
    points_list[output8][POINT_X] = mousex+48
    points_list[output8][POINT_Y] = mousey+84
    points_list[output9][POINT_X] = mousex+48
    points_list[output9][POINT_Y] = mousey+94
    points_list[output10][POINT_X] = mousex+48
    points_list[output10][POINT_Y] = mousey+104

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][DecadeCounterDecoderDriver_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+52 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+116 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][DecadeCounterDecoderDriver_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Input1])
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Input2])
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Input3])
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Input4])
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Output1])
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Output2])
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Output3])
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Output4])
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Output5])
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Output6])
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Output7])
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Output8])
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Output9])
          point_delete(compoent_list[handle][DecadeCounterDecoderDriver_Output10])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( DecadeCounterDecoderDriver, Mouse_Method, routine_id("mouseDecadeCounterDecoderDriver") )

procedure stepDecadeCounterDecoderDriver(integer handle)
  integer input1,input2,input3,input4,output1,output2,output3,output4,output5,output6,output7,output8,output9,output10
  integer clock,count,clocked,reset,reseted

  count=compoent_list[handle][DecadeCounterDecoderDriver_Count]
  clocked=compoent_list[handle][DecadeCounterDecoderDriver_Clocked]
  reseted=compoent_list[handle][DecadeCounterDecoderDriver_Reseted]

  input1=compoent_list[handle][DecadeCounterDecoderDriver_Input1] --clock
  input2=compoent_list[handle][DecadeCounterDecoderDriver_Input2] --clock enable
  input3=compoent_list[handle][DecadeCounterDecoderDriver_Input3] --reset
  input4=compoent_list[handle][DecadeCounterDecoderDriver_Input4] --dispaly enabled
  output1=compoent_list[handle][DecadeCounterDecoderDriver_Output1] --a
  output2=compoent_list[handle][DecadeCounterDecoderDriver_Output2] --b
  output3=compoent_list[handle][DecadeCounterDecoderDriver_Output3] --c
  output4=compoent_list[handle][DecadeCounterDecoderDriver_Output4] --d
  output5=compoent_list[handle][DecadeCounterDecoderDriver_Output5] --e
  output6=compoent_list[handle][DecadeCounterDecoderDriver_Output6] --f
  output7=compoent_list[handle][DecadeCounterDecoderDriver_Output7] --g
  output8=compoent_list[handle][DecadeCounterDecoderDriver_Output8]  --2
  output9=compoent_list[handle][DecadeCounterDecoderDriver_Output9]  --10
  output10=compoent_list[handle][DecadeCounterDecoderDriver_Output10] --enable output

  clock=points_list[input1][POINT_STATE]
  reset=points_list[input3][POINT_STATE]


if reset=0 then
	
  if reseted=1 then
  	compoent_list[handle][DecadeCounterDecoderDriver_Reseted]=0
  	count=0
  	compoent_list[handle][DecadeCounterDecoderDriver_Count]=count
  	send_signal(output7,0)
  end if

  if clock=1 and points_list[input2][POINT_STATE]=0 and clocked=0 then
    compoent_list[handle][DecadeCounterDecoderDriver_Clocked]=1
  elsif clock=0 and points_list[input2][POINT_STATE]=0 and clocked=1 then
    count+=1
    if count=10 then
      send_signal(output1,1)--a
	  send_signal(output2,1)--b
	  send_signal(output3,1)--c
	  send_signal(output4,1)--d
	  send_signal(output5,1)--e
	  send_signal(output6,1)--f
	  send_signal(output7,0)--g
	  count=0
    else
	  if count=1 then
	    send_signal(output1,0)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,0)--d
	  	send_signal(output5,0)--e
	  	send_signal(output6,0)--f
	  	send_signal(output7,0)--g
	  elsif count=2 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,0)--c
	  	send_signal(output4,1)--d
	  	send_signal(output5,1)--e
	  	send_signal(output6,0)--f
	  	send_signal(output7,1)--g
	  elsif count=3 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,1)--d
	  	send_signal(output5,0)--e
	  	send_signal(output6,0)--f
	  	send_signal(output7,1)--g
	  elsif count=4 then
	  	send_signal(output1,0)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,0)--d
	  	send_signal(output5,0)--e
	  	send_signal(output6,1)--f
	  	send_signal(output7,1)--g
	  elsif count=5 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,0)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,1)--d
	  	send_signal(output5,0)--e
	  	send_signal(output6,1)--f
	  	send_signal(output7,1)--g
	  elsif count=6 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,0)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,1)--d
	  	send_signal(output5,1)--e
	  	send_signal(output6,1)--f
	  	send_signal(output7,1)--g
	  elsif count=7 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,0)--d
	  	send_signal(output5,0)--e
	  	send_signal(output6,0)--f
	  	send_signal(output7,0)--g
	  elsif count=8 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,1)--d
	  	send_signal(output5,1)--e
	  	send_signal(output6,1)--f
	  	send_signal(output7,1)--g
	  elsif count=9 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,1)--d
	  	send_signal(output5,0)--e
	  	send_signal(output6,1)--f
	  	send_signal(output7,1)--g
	  end if
    end if

    compoent_list[handle][DecadeCounterDecoderDriver_Count]=count
  	compoent_list[handle][DecadeCounterDecoderDriver_Clocked]=0
  end if

elsif reset=1 then

  if points_list[output1][POINT_STATE]=0 then
    send_signal(output1,1)
  end if
  if points_list[output2][POINT_STATE]=0 then
    send_signal(output2,1)
  end if
  if points_list[output3][POINT_STATE]=0 then
    send_signal(output3,1)
  end if
  if points_list[output4][POINT_STATE]=0 then
    send_signal(output4,1)
  end if
  if points_list[output5][POINT_STATE]=0 then
    send_signal(output5,1)
  end if
  if points_list[output6][POINT_STATE]=0 then
    send_signal(output6,1)
  end if
  if points_list[output7][POINT_STATE]=0 then
    send_signal(output7,1)
  end if
  compoent_list[handle][DecadeCounterDecoderDriver_Reseted]=1
end if

end procedure

SetMethod( DecadeCounterDecoderDriver, Step_Method, routine_id("stepDecadeCounterDecoderDriver") )



procedure drawDecadeCounterDecoderDriver( integer handle )
  draw_sprite(buffer,ic_bitmaps[1],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( DecadeCounterDecoderDriver, Draw_Method, routine_id("drawDecadeCounterDecoderDriver") )



constant
    SevenSegmentDisplay         = createclass( Compoent ),
    SevenSegmentDisplay_Input1  = classvaraible(),
    SevenSegmentDisplay_Input2  = classvaraible(),
    SevenSegmentDisplay_Input3  = classvaraible(),
    SevenSegmentDisplay_Input4  = classvaraible(),
    SevenSegmentDisplay_Input5  = classvaraible(),
    SevenSegmentDisplay_Input6  = classvaraible(),
    SevenSegmentDisplay_Input7  = classvaraible(),
    SevenSegmentDisplay_Move    = classvaraible()

procedure initSevenSegmentDisplay( integer handle )
  integer x,y,input1,input2,input3,input4,input5,input6,input7

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][TextName]="Seven Segment Display"
  compoent_list[handle][SevenSegmentDisplay_Input1]  = point_create( x, y+4 )
  compoent_list[handle][SevenSegmentDisplay_Input2]  = point_create( x, y+16 )
  compoent_list[handle][SevenSegmentDisplay_Input3]  = point_create( x, y+28 )
  compoent_list[handle][SevenSegmentDisplay_Input4]  = point_create( x, y+40 )
  compoent_list[handle][SevenSegmentDisplay_Input5]  = point_create( x, y+52 )
  compoent_list[handle][SevenSegmentDisplay_Input6]  = point_create( x, y+64 )
  compoent_list[handle][SevenSegmentDisplay_Input7]  = point_create( x, y+76 )
  compoent_list[handle][SevenSegmentDisplay_Move]    = 1

  input1=compoent_list[handle][SevenSegmentDisplay_Input1]
  input2=compoent_list[handle][SevenSegmentDisplay_Input2]
  input3=compoent_list[handle][SevenSegmentDisplay_Input3]
  input4=compoent_list[handle][SevenSegmentDisplay_Input4]
  input5=compoent_list[handle][SevenSegmentDisplay_Input5]
  input6=compoent_list[handle][SevenSegmentDisplay_Input6]
  input7=compoent_list[handle][SevenSegmentDisplay_Input7]

  points_list[input1][POINT_TYPE]=point_input_type
  points_list[input2][POINT_TYPE]=point_input_type
  points_list[input3][POINT_TYPE]=point_input_type
  points_list[input4][POINT_TYPE]=point_input_type
  points_list[input5][POINT_TYPE]=point_input_type
  points_list[input6][POINT_TYPE]=point_input_type
  points_list[input7][POINT_TYPE]=point_input_type

  points_list[input1][POINT_PARENT_ID]=handle
  points_list[input2][POINT_PARENT_ID]=handle
  points_list[input3][POINT_PARENT_ID]=handle
  points_list[input4][POINT_PARENT_ID]=handle
  points_list[input5][POINT_PARENT_ID]=handle
  points_list[input6][POINT_PARENT_ID]=handle
  points_list[input7][POINT_PARENT_ID]=handle

  setTimer(CWindow1,1001,0)
end procedure

SetMethod( SevenSegmentDisplay, Init_Method, routine_id("initSevenSegmentDisplay") )

procedure mouseSevenSegmentDisplay(integer handle)

  integer input1,input2,input3,input4,input5,input6,input7,offsetx,offsety
  if compoent_list[handle][SevenSegmentDisplay_Move]  then
    offsetx=25
    offsety=25

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    input1=compoent_list[handle][SevenSegmentDisplay_Input1]
    input2=compoent_list[handle][SevenSegmentDisplay_Input2]
    input3=compoent_list[handle][SevenSegmentDisplay_Input3]
    input4=compoent_list[handle][SevenSegmentDisplay_Input4]
    input5=compoent_list[handle][SevenSegmentDisplay_Input5]
    input6=compoent_list[handle][SevenSegmentDisplay_Input6]
    input7=compoent_list[handle][SevenSegmentDisplay_Input7]

    points_list[input1][POINT_X] = mousex
    points_list[input1][POINT_Y] = mousey+4
    points_list[input2][POINT_X] = mousex
    points_list[input2][POINT_Y] = mousey+16
    points_list[input3][POINT_X] = mousex
    points_list[input3][POINT_Y] = mousey+28
    points_list[input4][POINT_X] = mousex
    points_list[input4][POINT_Y] = mousey+40
    points_list[input5][POINT_X] = mousex
    points_list[input5][POINT_Y] = mousey+52
    points_list[input6][POINT_X] = mousex
    points_list[input6][POINT_Y] = mousey+64
    points_list[input7][POINT_X] = mousex
    points_list[input7][POINT_Y] = mousey+76

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][SevenSegmentDisplay_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition]+9 and mousex<=compoent_list[handle][XPosition]+69 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+80 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][SevenSegmentDisplay_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][SevenSegmentDisplay_Input1])
          point_delete(compoent_list[handle][SevenSegmentDisplay_Input2])
          point_delete(compoent_list[handle][SevenSegmentDisplay_Input3])
          point_delete(compoent_list[handle][SevenSegmentDisplay_Input4])
          point_delete(compoent_list[handle][SevenSegmentDisplay_Input5])
          point_delete(compoent_list[handle][SevenSegmentDisplay_Input6])
          point_delete(compoent_list[handle][SevenSegmentDisplay_Input7])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( SevenSegmentDisplay, Mouse_Method, routine_id("mouseSevenSegmentDisplay") )

procedure stepSevenSegmentDisplay(integer handle)
end procedure

SetMethod( SevenSegmentDisplay, Step_Method, routine_id("stepSevenSegmentDisplay") )


procedure drawSevenSegmentDisplay( integer handle )
  integer x,y,width,height,input1,input2,input3,input4,input5,input6,input7

  input1=points_list[compoent_list[handle][SevenSegmentDisplay_Input1]][POINT_STATE]
  input2=points_list[compoent_list[handle][SevenSegmentDisplay_Input2]][POINT_STATE]
  input3=points_list[compoent_list[handle][SevenSegmentDisplay_Input3]][POINT_STATE]
  input4=points_list[compoent_list[handle][SevenSegmentDisplay_Input4]][POINT_STATE]
  input5=points_list[compoent_list[handle][SevenSegmentDisplay_Input5]][POINT_STATE]
  input6=points_list[compoent_list[handle][SevenSegmentDisplay_Input6]][POINT_STATE]
  input7=points_list[compoent_list[handle][SevenSegmentDisplay_Input7]][POINT_STATE]

  x=compoent_list[handle][XPosition]+10-view_left
  y=compoent_list[handle][YPosition]-view_top
  width=60
  height=80

  rectfill(buffer,x,y,x+width,y+height,rgb2(115,56,0))-- background block



  if input1=1 then
  	rectfill(buffer,x+9,y+10,x+9+42,y+10+5,color_red)--top  A
  else
    rectfill(buffer,x+9,y+10,x+9+42,y+10+5,color_black)--top  A
  end if

  if input2=1 then
    rectfill(buffer,x+9+37,y+15,x+9+37+5,y+10+32,color_red)--right side top  B
  else
    rectfill(buffer,x+9+37,y+15,x+9+37+5,y+10+32,color_black)--right side top  B
  end if

  if input3=1 then
    rectfill(buffer,x+9+37,y+42,x+9+37+5,y+37+32,color_red)--right side bottom C
  else
    rectfill(buffer,x+9+37,y+42,x+9+37+5,y+37+32,color_black)--right side bottom C
  end if

  if input4=1 then
    rectfill(buffer,x+9,y+65,x+9+42,y+65+5,color_red)--bottom D
  else
    rectfill(buffer,x+9,y+65,x+9+42,y+65+5,color_black)--bottom D
  end if

  if input5=1 then
    rectfill(buffer,x+9,y+42,x+9+5,y+37+32,color_red)--left side bottom  E
  else
    rectfill(buffer,x+9,y+42,x+9+5,y+37+32,color_black)--left side bottom  E
  end if

  if input6=1 then
    rectfill(buffer,x+9,y+15,x+9+5,y+10+32,color_red)--left side top  F
  else
    rectfill(buffer,x+9,y+15,x+9+5,y+10+32,color_black)--left side top  F
  end if

  if input7=1 then
    rectfill(buffer,x+9,y+37,x+9+42,y+37+5,color_red)--middle G
  else
    rectfill(buffer,x+9,y+37,x+9+42,y+37+5,color_black)--middle G
  end if

  --itofix(
  --arc(buffer, x, y, -21, 43, 40, color_red)

end procedure

SetMethod( SevenSegmentDisplay, Draw_Method, routine_id("drawSevenSegmentDisplay") )





--=============================new 2008 arugust 14====================================--
constant
    GPU         = createclass( Compoent ),
    GPU_Input1  = classvaraible(),
    GPU_Input2  = classvaraible(),
    GPU_Input3  = classvaraible(),
    GPU_Input4  = classvaraible(),
    GPU_Input5  = classvaraible(),
    GPU_Input6  = classvaraible(),
    GPU_Input7  = classvaraible(),
    GPU_Input8  = classvaraible(),
    GPU_Input9  = classvaraible(),
    GPU_Input10  = classvaraible(),
    GPU_Input11  = classvaraible(),
    GPU_Input12  = classvaraible(),
    GPU_Input13  = classvaraible(),
    GPU_Input14  = classvaraible(),
    GPU_Bitmap    = classvaraible(),
    GPU_Array    = classvaraible(),
    GPU_Move    = classvaraible()


procedure initGPU( integer handle )

  integer x,y,input1,input2,input3,input4,input5,input6,input7,input8,input9,input10,input11,input12,input13,input14
  sequence array

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][TextName]="GPU"
  compoent_list[handle][GPU_Bitmap]  = create_bitmap(128,128)
  array={}
  for i=1 to 32 do
  	array=append(array,repeat(0,32))
  end for

  compoent_list[handle][GPU_Array]  = array
  clear_to_color(compoent_list[handle][GPU_Bitmap],0)
  compoent_list[handle][GPU_Input1]  = point_create( x, y+12 )
  compoent_list[handle][GPU_Input2]  = point_create( x, y+30 )
  compoent_list[handle][GPU_Input3]  = point_create( x, y+12 )
  compoent_list[handle][GPU_Input4]  = point_create( x, y+30 )
  compoent_list[handle][GPU_Input5]  = point_create( x, y+12 )
  compoent_list[handle][GPU_Input6]  = point_create( x, y+30 )
  compoent_list[handle][GPU_Input7]  = point_create( x, y+12 )
  compoent_list[handle][GPU_Input8]  = point_create( x, y+30 )
  compoent_list[handle][GPU_Input9]  = point_create( x, y+12 )
  compoent_list[handle][GPU_Input10]  = point_create( x, y+30 )
  compoent_list[handle][GPU_Input11]  = point_create( x, y+12 )
  compoent_list[handle][GPU_Input12]  = point_create( x, y+30 )
  compoent_list[handle][GPU_Input13]  = point_create( x, y+12 )
  compoent_list[handle][GPU_Input14]  = point_create( x, y+30 )

  compoent_list[handle][GPU_Move]    = 1

  input1=compoent_list[handle][GPU_Input1]
  input2=compoent_list[handle][GPU_Input2]
  input3=compoent_list[handle][GPU_Input3]
  input4=compoent_list[handle][GPU_Input4]
  input5=compoent_list[handle][GPU_Input5]
  input6=compoent_list[handle][GPU_Input6]
  input7=compoent_list[handle][GPU_Input7]
  input8=compoent_list[handle][GPU_Input8]
  input9=compoent_list[handle][GPU_Input9]
  input10=compoent_list[handle][GPU_Input10]
  input11=compoent_list[handle][GPU_Input11]
  input12=compoent_list[handle][GPU_Input12]
  input13=compoent_list[handle][GPU_Input13]
  input14=compoent_list[handle][GPU_Input14]


  points_list[input1][POINT_TYPE]=point_input_type
  points_list[input2][POINT_TYPE]=point_input_type
  points_list[input3][POINT_TYPE]=point_input_type
  points_list[input4][POINT_TYPE]=point_input_type
  points_list[input5][POINT_TYPE]=point_input_type
  points_list[input6][POINT_TYPE]=point_input_type
  points_list[input7][POINT_TYPE]=point_input_type
  points_list[input8][POINT_TYPE]=point_input_type
  points_list[input9][POINT_TYPE]=point_input_type
  points_list[input10][POINT_TYPE]=point_input_type
  points_list[input11][POINT_TYPE]=point_input_type
  points_list[input12][POINT_TYPE]=point_input_type
  points_list[input13][POINT_TYPE]=point_input_type
  points_list[input14][POINT_TYPE]=point_input_type

  points_list[input1][POINT_PARENT_ID]=handle
  points_list[input2][POINT_PARENT_ID]=handle
  points_list[input3][POINT_PARENT_ID]=handle
  points_list[input4][POINT_PARENT_ID]=handle
  points_list[input5][POINT_PARENT_ID]=handle
  points_list[input6][POINT_PARENT_ID]=handle
  points_list[input7][POINT_PARENT_ID]=handle
  points_list[input8][POINT_PARENT_ID]=handle
  points_list[input9][POINT_PARENT_ID]=handle
  points_list[input10][POINT_PARENT_ID]=handle
  points_list[input11][POINT_PARENT_ID]=handle
  points_list[input12][POINT_PARENT_ID]=handle
  points_list[input13][POINT_PARENT_ID]=handle
  points_list[input14][POINT_PARENT_ID]=handle

  setTimer(CWindow1,1001,0)
end procedure

SetMethod( GPU, Init_Method, routine_id("initGPU") )

procedure mouseGPU(integer handle)

  integer input1,input2,input3,input4,input5,input6,input7,input8,input9,input10,input11,input12,input13,input14,offsetx,offsety
  if compoent_list[handle][GPU_Move]  then
    offsetx=25
    offsety=25

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    input1=compoent_list[handle][GPU_Input1]
    input2=compoent_list[handle][GPU_Input2]
    input3=compoent_list[handle][GPU_Input3]
    input4=compoent_list[handle][GPU_Input4]
    input5=compoent_list[handle][GPU_Input5]
    input6=compoent_list[handle][GPU_Input6]
    input7=compoent_list[handle][GPU_Input7]
    input8=compoent_list[handle][GPU_Input8]
    input9=compoent_list[handle][GPU_Input9]
    input10=compoent_list[handle][GPU_Input10]
    input11=compoent_list[handle][GPU_Input11]
    input12=compoent_list[handle][GPU_Input12]
    input13=compoent_list[handle][GPU_Input13]
    input14=compoent_list[handle][GPU_Input14]


    --row
    points_list[input1][POINT_X] = mousex-20
    points_list[input1][POINT_Y] = mousey+12

    points_list[input2][POINT_X] = mousex-20
    points_list[input2][POINT_Y] = mousey+24

    points_list[input3][POINT_X] = mousex-20
    points_list[input3][POINT_Y] = mousey+34

    points_list[input4][POINT_X] = mousex-20
    points_list[input4][POINT_Y] = mousey+44

    points_list[input5][POINT_X] = mousex-20
    points_list[input5][POINT_Y] = mousey+54

    --colum
    points_list[input6][POINT_X] = mousex-20
    points_list[input6][POINT_Y] = mousey+64

    points_list[input7][POINT_X] = mousex-20
    points_list[input7][POINT_Y] = mousey+74

    points_list[input8][POINT_X] = mousex+140
    points_list[input8][POINT_Y] = mousey+12

    points_list[input9][POINT_X] = mousex+140
    points_list[input9][POINT_Y] = mousey+24

    points_list[input10][POINT_X] = mousex+140
    points_list[input10][POINT_Y] = mousey+34

    --
    points_list[input11][POINT_X] = mousex+140
    points_list[input11][POINT_Y] = mousey+44

    points_list[input12][POINT_X] = mousex+140
    points_list[input12][POINT_Y] = mousey+54

    points_list[input13][POINT_X] = mousex+140
    points_list[input13][POINT_Y] = mousey+64

    points_list[input14][POINT_X] = mousex+140
    points_list[input14][POINT_Y] = mousey+74

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][GPU_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+128 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+128 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][GPU_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][GPU_Input1])
          point_delete(compoent_list[handle][GPU_Input2])
          point_delete(compoent_list[handle][GPU_Input3])
          point_delete(compoent_list[handle][GPU_Input4])
          point_delete(compoent_list[handle][GPU_Input5])
          point_delete(compoent_list[handle][GPU_Input6])
          point_delete(compoent_list[handle][GPU_Input7])
          point_delete(compoent_list[handle][GPU_Input8])
          point_delete(compoent_list[handle][GPU_Input9])
          point_delete(compoent_list[handle][GPU_Input10])
          point_delete(compoent_list[handle][GPU_Input11])
          point_delete(compoent_list[handle][GPU_Input12])
          point_delete(compoent_list[handle][GPU_Input13])
          point_delete(compoent_list[handle][GPU_Input14])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( GPU, Mouse_Method, routine_id("mouseGPU") )

procedure stepGPU(integer handle)
  integer input1,input2,input3,input4,input5,input6,input7,input8,input9,input10,input11,input12,input13,input14
  integer row,colum
  sequence array
  atom bitmap

  input1=compoent_list[handle][GPU_Input1]
  input2=compoent_list[handle][GPU_Input2]
  input3=compoent_list[handle][GPU_Input3]
  input4=compoent_list[handle][GPU_Input4]
  input5=compoent_list[handle][GPU_Input5]
  input6=compoent_list[handle][GPU_Input6]
  input7=compoent_list[handle][GPU_Input7]
  input8=compoent_list[handle][GPU_Input8]
  input9=compoent_list[handle][GPU_Input9]
  input10=compoent_list[handle][GPU_Input10]
  input11=compoent_list[handle][GPU_Input11]
  input12=compoent_list[handle][GPU_Input12]
  input13=compoent_list[handle][GPU_Input13]
  input14=compoent_list[handle][GPU_Input14]

  if points_list[input12][POINT_STATE]=1 then --set the pixel

   row=binary_to_dec({points_list[input5][POINT_STATE],points_list[input4][POINT_STATE],
   points_list[input3][POINT_STATE],
   points_list[input2][POINT_STATE],points_list[input1][POINT_STATE]})+1

   colum=binary_to_dec({points_list[input10][POINT_STATE],points_list[input9][POINT_STATE],
   points_list[input8][POINT_STATE],
   points_list[input7][POINT_STATE],points_list[input6][POINT_STATE]})+1
   compoent_list[handle][GPU_Array][row][colum]=points_list[input11][POINT_STATE]

  end if

  if points_list[input13][POINT_STATE]=1 then
    array=compoent_list[handle][GPU_Array]
    for y=1 to 32 do
      for x=1 to 32 do
        array[y][x]=0
      end for
    end for
    compoent_list[handle][GPU_Array]=array
  end if

  if points_list[input14][POINT_STATE]=1 then --update refresh draw

    bitmap=compoent_list[handle][GPU_Bitmap]
    array=compoent_list[handle][GPU_Array]

    for y=1 to 32 do
      for x=1 to 32 do
        if array[y][x]=1 then
          allegro:rectfill(bitmap,(x*4)-4,(y*4)-4,x*4,y*4,color_blue)
        else
          allegro:rectfill(bitmap,(x*4)-4,(y*4)-4,x*4,y*4,color_black)
        end if		
      end for
    end for
  end if

end procedure

SetMethod( GPU, Step_Method, routine_id("stepGPU") )



procedure drawGPU( integer handle )
  draw_sprite(buffer,compoent_list[handle][GPU_Bitmap],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
  draw_sprite(buffer,ic_bitmaps[2],compoent_list[handle][XPosition]-view_left-13,compoent_list[handle][YPosition]-view_top-13)
end procedure

SetMethod( GPU, Draw_Method, routine_id("drawGPU") )

constant
    CPU         = createclass( Compoent ),
    CPU_Input1  = classvaraible(),
    CPU_Input2  = classvaraible(),
    CPU_Input3  = classvaraible(),
    CPU_Input4  = classvaraible(),
    CPU_Input5  = classvaraible(),
    CPU_Input6  = classvaraible(),
    CPU_Input7  = classvaraible(),
    CPU_Input8  = classvaraible(),
    CPU_Input9  = classvaraible(),
    CPU_Input10  = classvaraible(),
    CPU_Input11  = classvaraible(),
    CPU_Input12  = classvaraible(),
    CPU_Input13  = classvaraible(),
    CPU_Input14  = classvaraible(),

    CPU_Output1 = classvaraible(),
    CPU_Output2 = classvaraible(),
    CPU_Output3 = classvaraible(),
    CPU_Output4 = classvaraible(),
    CPU_Output5 = classvaraible(),
    CPU_Output6 = classvaraible(),
    CPU_Output7 = classvaraible(),
    CPU_Output8 = classvaraible(),
    CPU_Output9 = classvaraible(),
    CPU_Output10 = classvaraible(),
    CPU_Output11 = classvaraible(),
    CPU_Output12 = classvaraible(),

    CPU_Move    = classvaraible(),
    CPU_ROM    = classvaraible(),
    CPU_REG    = classvaraible()


procedure initCPU( integer handle )
  integer x,y
  integer output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,output11,output12
  integer input1,input2,input3,input4,input5,input6,input7,input8,input9,input10,input11,input12,input13,input14
  sequence rom,reg

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][TextName]="CPU"

  rom={}
  for i=1 to 4096 do
  	rom=append(rom,repeat(0,32))  --16 bit wide rom
  end for
  reg={}
  for i=1 to 12 do
  	reg=append(reg,repeat(0,32))  --16 bit wide rom
  end for

  compoent_list[handle][CPU_ROM]  = rom

  compoent_list[handle][CPU_REG] = reg

  compoent_list[handle][CPU_Input1]  = point_create( x, y+12 )
  compoent_list[handle][CPU_Input2]  = point_create( x, y+30 )
  compoent_list[handle][CPU_Input3]  = point_create( x, y+12 )
  compoent_list[handle][CPU_Input4]  = point_create( x, y+30 )
  compoent_list[handle][CPU_Input5]  = point_create( x, y+12 )
  compoent_list[handle][CPU_Input6]  = point_create( x, y+30 )
  compoent_list[handle][CPU_Input7]  = point_create( x, y+12 )
  compoent_list[handle][CPU_Input8]  = point_create( x, y+30 )
  compoent_list[handle][CPU_Input9]  = point_create( x, y+12 )
  compoent_list[handle][CPU_Input10]  = point_create( x, y+30 )
  compoent_list[handle][CPU_Input11]  = point_create( x, y+12 )
  compoent_list[handle][CPU_Input12]  = point_create( x, y+30 )
  compoent_list[handle][CPU_Input13]  = point_create( x, y+12 )
  compoent_list[handle][CPU_Input14]  = point_create( x, y+30 )

  compoent_list[handle][CPU_Output1] = point_create( x+42, y+22 )
  compoent_list[handle][CPU_Output2] = point_create( x+42, y+22 )
  compoent_list[handle][CPU_Output3] = point_create( x+42, y+22 )
  compoent_list[handle][CPU_Output4] = point_create( x+42, y+22 )
  compoent_list[handle][CPU_Output5] = point_create( x+42, y+22 )
  compoent_list[handle][CPU_Output6] = point_create( x+42, y+22 )
  compoent_list[handle][CPU_Output7] = point_create( x+42, y+22 )
  compoent_list[handle][CPU_Output8] = point_create( x+42, y+22 )
  compoent_list[handle][CPU_Output9] = point_create( x+42, y+22 )
  compoent_list[handle][CPU_Output10] = point_create( x+42, y+22 )
  compoent_list[handle][CPU_Output11] = point_create( x+42, y+22 )
  compoent_list[handle][CPU_Output12] = point_create( x+42, y+22 )
  compoent_list[handle][CPU_Move]    = 1

  input1=compoent_list[handle][CPU_Input1]
  input2=compoent_list[handle][CPU_Input2]
  input3=compoent_list[handle][CPU_Input3]
  input4=compoent_list[handle][CPU_Input4]
  input5=compoent_list[handle][CPU_Input5]
  input6=compoent_list[handle][CPU_Input6]
  input7=compoent_list[handle][CPU_Input7]
  input8=compoent_list[handle][CPU_Input8]
  input9=compoent_list[handle][CPU_Input9]
  input10=compoent_list[handle][CPU_Input10]
  input11=compoent_list[handle][CPU_Input11]
  input12=compoent_list[handle][CPU_Input12]
  input13=compoent_list[handle][CPU_Input13]
  input14=compoent_list[handle][CPU_Input14]

  output1=compoent_list[handle][CPU_Output1]
  output2=compoent_list[handle][CPU_Output2]
  output3=compoent_list[handle][CPU_Output3]
  output4=compoent_list[handle][CPU_Output4]
  output5=compoent_list[handle][CPU_Output5]
  output6=compoent_list[handle][CPU_Output6]
  output7=compoent_list[handle][CPU_Output7]
  output8=compoent_list[handle][CPU_Output8]
  output9=compoent_list[handle][CPU_Output9]
  output10=compoent_list[handle][CPU_Output10]
  output11=compoent_list[handle][CPU_Output11]
  output12=compoent_list[handle][CPU_Output12]

  points_list[input1][POINT_TYPE]=point_input_type
  points_list[input2][POINT_TYPE]=point_input_type
  points_list[input3][POINT_TYPE]=point_input_type
  points_list[input4][POINT_TYPE]=point_input_type
  points_list[input5][POINT_TYPE]=point_input_type
  points_list[input6][POINT_TYPE]=point_input_type
  points_list[input7][POINT_TYPE]=point_input_type
  points_list[input8][POINT_TYPE]=point_input_type
  points_list[input9][POINT_TYPE]=point_input_type
  points_list[input10][POINT_TYPE]=point_input_type
  points_list[input11][POINT_TYPE]=point_input_type
  points_list[input12][POINT_TYPE]=point_input_type
  points_list[input13][POINT_TYPE]=point_input_type
  points_list[input14][POINT_TYPE]=point_input_type

  points_list[output1][POINT_TYPE]=point_output_type
  points_list[output2][POINT_TYPE]=point_output_type
  points_list[output3][POINT_TYPE]=point_output_type
  points_list[output4][POINT_TYPE]=point_output_type
  points_list[output5][POINT_TYPE]=point_output_type
  points_list[output6][POINT_TYPE]=point_output_type
  points_list[output7][POINT_TYPE]=point_output_type
  points_list[output8][POINT_TYPE]=point_output_type
  points_list[output9][POINT_TYPE]=point_output_type
  points_list[output10][POINT_TYPE]=point_output_type
  points_list[output11][POINT_TYPE]=point_output_type
  points_list[output12][POINT_TYPE]=point_output_type

  points_list[input1][POINT_PARENT_ID]=handle
  points_list[input2][POINT_PARENT_ID]=handle
  points_list[input3][POINT_PARENT_ID]=handle
  points_list[input4][POINT_PARENT_ID]=handle
  points_list[input5][POINT_PARENT_ID]=handle
  points_list[input6][POINT_PARENT_ID]=handle
  points_list[input7][POINT_PARENT_ID]=handle
  points_list[input8][POINT_PARENT_ID]=handle
  points_list[input9][POINT_PARENT_ID]=handle
  points_list[input10][POINT_PARENT_ID]=handle
  points_list[input11][POINT_PARENT_ID]=handle
  points_list[input12][POINT_PARENT_ID]=handle
  points_list[input13][POINT_PARENT_ID]=handle
  points_list[input14][POINT_PARENT_ID]=handle

  points_list[output1][POINT_PARENT_ID]=handle
  points_list[output2][POINT_PARENT_ID]=handle
  points_list[output3][POINT_PARENT_ID]=handle
  points_list[output4][POINT_PARENT_ID]=handle
  points_list[output5][POINT_PARENT_ID]=handle
  points_list[output6][POINT_PARENT_ID]=handle
  points_list[output7][POINT_PARENT_ID]=handle
  points_list[output8][POINT_PARENT_ID]=handle
  points_list[output9][POINT_PARENT_ID]=handle
  points_list[output10][POINT_PARENT_ID]=handle
  points_list[output11][POINT_PARENT_ID]=handle
  points_list[output12][POINT_PARENT_ID]=handle

  setTimer(CWindow1,1001,0)
end procedure

SetMethod( CPU, Init_Method, routine_id("initCPU") )

procedure mouseCPU(integer handle)

  integer offsetx,offsety
  integer output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,output11,output12
  integer input1,input2,input3,input4,input5,input6,input7,input8,input9,input10,input11,input12,input13,input14

  if compoent_list[handle][CPU_Move]  then
    offsetx=25
    offsety=25

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    input1=compoent_list[handle][CPU_Input1]
    input2=compoent_list[handle][CPU_Input2]
    input3=compoent_list[handle][CPU_Input3]
    input4=compoent_list[handle][CPU_Input4]
    input5=compoent_list[handle][CPU_Input5]
    input6=compoent_list[handle][CPU_Input6]
    input7=compoent_list[handle][CPU_Input7]
    input8=compoent_list[handle][CPU_Input8]
    input9=compoent_list[handle][CPU_Input9]
    input10=compoent_list[handle][CPU_Input10]
    input11=compoent_list[handle][CPU_Input11]
    input12=compoent_list[handle][CPU_Input12]
    input13=compoent_list[handle][CPU_Input13]
    input14=compoent_list[handle][CPU_Input14]

    output1=compoent_list[handle][CPU_Output1]
    output2=compoent_list[handle][CPU_Output2]
    output3=compoent_list[handle][CPU_Output3]
    output4=compoent_list[handle][CPU_Output4]
    output5=compoent_list[handle][CPU_Output5]
    output6=compoent_list[handle][CPU_Output6]
    output7=compoent_list[handle][CPU_Output7]
    output8=compoent_list[handle][CPU_Output8]
    output9=compoent_list[handle][CPU_Output9]
    output10=compoent_list[handle][CPU_Output10]
    output11=compoent_list[handle][CPU_Output11]
    output12=compoent_list[handle][CPU_Output12]

    --1
    points_list[input1][POINT_X] = mousex-10
    points_list[input1][POINT_Y] = mousey+12
    --2
    points_list[input2][POINT_X] = mousex-10
    points_list[input2][POINT_Y] = mousey+22

    points_list[input3][POINT_X] = mousex-10
    points_list[input3][POINT_Y] = mousey+32

    points_list[input4][POINT_X] = mousex-10
    points_list[input4][POINT_Y] = mousey+42

    points_list[input5][POINT_X] = mousex-10
    points_list[input5][POINT_Y] = mousey+52

    points_list[input6][POINT_X] = mousex-10
    points_list[input6][POINT_Y] = mousey+62

    points_list[input7][POINT_X] = mousex-10
    points_list[input7][POINT_Y] = mousey+72

    points_list[input8][POINT_X] = mousex-10
    points_list[input8][POINT_Y] = mousey+82

    points_list[input9][POINT_X] = mousex-10
    points_list[input9][POINT_Y] = mousey+92

    points_list[input10][POINT_X] = mousex-10
    points_list[input10][POINT_Y] = mousey+102

    points_list[input11][POINT_X] = mousex-10
    points_list[input11][POINT_Y] = mousey+112

    points_list[input12][POINT_X] = mousex-10
    points_list[input12][POINT_Y] = mousey+122

    points_list[input13][POINT_X] = mousex-10
    points_list[input13][POINT_Y] = mousey+132

    --next side
    points_list[input14][POINT_X] = mousex+48
    points_list[input14][POINT_Y] = mousey+12

    points_list[output1][POINT_X] = mousex+48
    points_list[output1][POINT_Y] = mousey+22

    points_list[output2][POINT_X] = mousex+48
    points_list[output2][POINT_Y] = mousey+32

    points_list[output3][POINT_X] = mousex+48
    points_list[output3][POINT_Y] = mousey+42

    points_list[output4][POINT_X] = mousex+48
    points_list[output4][POINT_Y] = mousey+52

    points_list[output5][POINT_X] = mousex+48
    points_list[output5][POINT_Y] = mousey+62

    points_list[output6][POINT_X] = mousex+48
    points_list[output6][POINT_Y] = mousey+72

    points_list[output7][POINT_X] = mousex+48
    points_list[output7][POINT_Y] = mousey+82

    points_list[output8][POINT_X] = mousex+48
    points_list[output8][POINT_Y] = mousey+92

    points_list[output9][POINT_X] = mousex+48
    points_list[output9][POINT_Y] = mousey+102

    points_list[output10][POINT_X] = mousex+48
    points_list[output10][POINT_Y] = mousey+112

    points_list[output11][POINT_X] = mousex+48
    points_list[output11][POINT_Y] = mousey+122

    points_list[output12][POINT_X] = mousex+48
    points_list[output12][POINT_Y] = mousey+132

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][CPU_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+50 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+160 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        setEnable(PopupItem_104,1)
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        setEnable(PopupItem_104,0)
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][CPU_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][CPU_Input1])
          point_delete(compoent_list[handle][CPU_Input2])
          point_delete(compoent_list[handle][CPU_Input3])
          point_delete(compoent_list[handle][CPU_Input4])
          point_delete(compoent_list[handle][CPU_Input5])
          point_delete(compoent_list[handle][CPU_Input6])
          point_delete(compoent_list[handle][CPU_Input7])
          point_delete(compoent_list[handle][CPU_Input8])
          point_delete(compoent_list[handle][CPU_Input9])
          point_delete(compoent_list[handle][CPU_Input10])
          point_delete(compoent_list[handle][CPU_Input11])
          point_delete(compoent_list[handle][CPU_Input12])
          point_delete(compoent_list[handle][CPU_Input13])
          point_delete(compoent_list[handle][CPU_Input14])
          point_delete(compoent_list[handle][CPU_Output1])
          point_delete(compoent_list[handle][CPU_Output2])
          point_delete(compoent_list[handle][CPU_Output3])
          point_delete(compoent_list[handle][CPU_Output4])
          point_delete(compoent_list[handle][CPU_Output5])
          point_delete(compoent_list[handle][CPU_Output6])
          point_delete(compoent_list[handle][CPU_Output7])
          point_delete(compoent_list[handle][CPU_Output8])
          point_delete(compoent_list[handle][CPU_Output9])
          point_delete(compoent_list[handle][CPU_Output10])
          point_delete(compoent_list[handle][CPU_Output11])
          point_delete(compoent_list[handle][CPU_Output12])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        elsif compoent_popup_command=3 then
          openWindow(Window2,Modal)
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( CPU, Mouse_Method, routine_id("mouseCPU") )

procedure stepCPU(integer handle)
  integer output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,output11,output12
  integer input1,input2,input3,input4,input5,input6,input7,input8,input9,input10,input11,input12,input13,input14
  sequence rom,reg
  integer pc,op
  atom a,b,c,d

  rom=compoent_list[handle][CPU_ROM]
  reg=compoent_list[handle][CPU_REG]

  pc = binary_to_dec(reg[1])+1 --program counter


  input1=compoent_list[handle][CPU_Input1]
  input2=compoent_list[handle][CPU_Input2]
  input3=compoent_list[handle][CPU_Input3]
  input4=compoent_list[handle][CPU_Input4]
  input5=compoent_list[handle][CPU_Input5]
  input6=compoent_list[handle][CPU_Input6]
  input7=compoent_list[handle][CPU_Input7]
  input8=compoent_list[handle][CPU_Input8]
  input9=compoent_list[handle][CPU_Input9]
  input10=compoent_list[handle][CPU_Input10]
  input11=compoent_list[handle][CPU_Input11]
  input12=compoent_list[handle][CPU_Input12]
  input13=compoent_list[handle][CPU_Input13]
  input14=compoent_list[handle][CPU_Input14]

  output1=compoent_list[handle][CPU_Output1]
  output2=compoent_list[handle][CPU_Output2]
  output3=compoent_list[handle][CPU_Output3]
  output4=compoent_list[handle][CPU_Output4]
  output5=compoent_list[handle][CPU_Output5]
  output6=compoent_list[handle][CPU_Output6]
  output7=compoent_list[handle][CPU_Output7]
  output8=compoent_list[handle][CPU_Output8]
  output9=compoent_list[handle][CPU_Output9]
  output10=compoent_list[handle][CPU_Output10]
  output11=compoent_list[handle][CPU_Output11]
  output12=compoent_list[handle][CPU_Output12]

  op=binary_to_dec(rom[pc][32..27]) -- 6 bit opcode
  if op=1 then--MOV reg[2]
    a=binary_to_dec(rom[pc][26..16])
    b=binary_to_dec(rom[pc][16..1])
    ?a
    ?b
    if a<16 then--reg

    else --rom

    end if

    reg[1]=dec_to_binary(pc) --program counter gets incressed here
  elsif op=2 then--SET
    a=binary_to_dec(rom[pc][26..16])
    b=binary_to_dec(rom[pc][16..1])
    if a<16 then--reg

    else --rom

    end if

  	reg[1]=dec_to_binary(pc) --program counter gets incressed here
  end if


end procedure

SetMethod( CPU, Step_Method, routine_id("stepCPU") )



procedure drawCPU( integer handle )
  draw_sprite(buffer,ic_bitmaps[3],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( CPU, Draw_Method, routine_id("drawCPU") )


--=============================end new 2008 arugust 14====================================--

constant
    AndGate         = createclass( Compoent ),
    AndGate_Input1  = classvaraible(),
    AndGate_Input2  = classvaraible(),
    AndGate_Output1 = classvaraible(),
    AndGate_Move    = classvaraible()

procedure initAndGate( integer handle )
  integer x,y,input1,input2,output1

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][TextName]="AND GATE"
  compoent_list[handle][AndGate_Input1]  = point_create( x, y+12 )
  compoent_list[handle][AndGate_Input2]  = point_create( x, y+30 )
  compoent_list[handle][AndGate_Output1] = point_create( x+42, y+22 )
  compoent_list[handle][AndGate_Move]    = 1

  input1=compoent_list[handle][AndGate_Input1]
  input2=compoent_list[handle][AndGate_Input2]
  output1=compoent_list[handle][AndGate_Output1]

  points_list[input1][POINT_TYPE]=point_input_type
  points_list[input2][POINT_TYPE]=point_input_type
  points_list[output1][POINT_TYPE]=point_output_type

  points_list[input1][POINT_PARENT_ID]=handle
  points_list[input2][POINT_PARENT_ID]=handle
  points_list[output1][POINT_PARENT_ID]=handle

  setTimer(CWindow1,1001,0)
end procedure

SetMethod( AndGate, Init_Method, routine_id("initAndGate") )

procedure mouseAndGate(integer handle)

  integer input1,input2,output1,offsetx,offsety
  if compoent_list[handle][AndGate_Move]  then
    offsetx=25
    offsety=25

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    input1=compoent_list[handle][AndGate_Input1]
    input2=compoent_list[handle][AndGate_Input2]
    output1=compoent_list[handle][AndGate_Output1]

    points_list[input1][POINT_X] = mousex
    points_list[input1][POINT_Y] = mousey+12
    points_list[input2][POINT_X] = mousex
    points_list[input2][POINT_Y] = mousey+30
    points_list[output1][POINT_X] = mousex+42
    points_list[output1][POINT_Y] = mousey+22

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][AndGate_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+50 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+50 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][AndGate_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][AndGate_Input1])
          point_delete(compoent_list[handle][AndGate_Input2])
          point_delete(compoent_list[handle][AndGate_Output1])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( AndGate, Mouse_Method, routine_id("mouseAndGate") )

procedure stepAndGate(integer handle)
  integer input1,input2,output1

  input1=compoent_list[handle][AndGate_Input1]
  input2=compoent_list[handle][AndGate_Input2]
  output1=compoent_list[handle][AndGate_Output1]

	if points_list[input1][POINT_STATE]=1 and points_list[input2][POINT_STATE]=1 then
      if points_list[output1][POINT_STATE]=0 then
        send_signal(output1,1)
      end if
    else
     if points_list[output1][POINT_STATE]=1 then
       send_signal(output1,0)
     end if
   end if
end procedure

SetMethod( AndGate, Step_Method, routine_id("stepAndGate") )



procedure drawAndGate( integer handle )
  draw_sprite(buffer,logicgate_bitmaps[1],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( AndGate, Draw_Method, routine_id("drawAndGate") )

constant
    NandGate         = createclass( AndGate  )


procedure stepNandGate(integer handle)
  integer input1,input2,output1

  input1=compoent_list[handle][AndGate_Input1]
  input2=compoent_list[handle][AndGate_Input2]
  output1=compoent_list[handle][AndGate_Output1]

	if points_list[input1][POINT_STATE]=1 and points_list[input2][POINT_STATE]=1 then
      if points_list[output1][POINT_STATE]=1 then
        send_signal(output1,0)
      end if
    else
     if points_list[output1][POINT_STATE]=0 then
       send_signal(output1,1)
     end if
   end if
end procedure

SetMethod( NandGate, Step_Method, routine_id("stepNandGate") )



procedure drawNandGate( integer handle )
  draw_sprite(buffer,logicgate_bitmaps[2],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( NandGate, Draw_Method, routine_id("drawNandGate") )



constant
    NotGate         = createclass( Compoent ),
    NotGate_Input1  = classvaraible(),
    NotGate_Output1 = classvaraible(),
    NotGate_Move    = classvaraible()

procedure initNotGate( integer handle )
  integer x,y,input1,output1

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][TextName]="NOT GATE"
  compoent_list[handle][NotGate_Input1]  = point_create( x, y+22 )
  compoent_list[handle][NotGate_Output1] = point_create( x+42, y+22 )
  compoent_list[handle][NotGate_Move]    = 1


  input1=compoent_list[handle][NotGate_Input1]
  output1=compoent_list[handle][NotGate_Output1]

  points_list[input1][POINT_TYPE]=point_input_type
  points_list[output1][POINT_TYPE]=point_output_type

  points_list[input1][POINT_PARENT_ID]=handle
  points_list[output1][POINT_PARENT_ID]=handle

  setTimer(CWindow1,1001,0)
end procedure

SetMethod( NotGate, Init_Method, routine_id("initNotGate") )

procedure mouseNotGate(integer handle)

  integer input1,output1,offsetx,offsety
  if compoent_list[handle][NotGate_Move]  then
    offsetx=25
    offsety=25

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    input1=compoent_list[handle][NotGate_Input1]
    output1=compoent_list[handle][NotGate_Output1]

    points_list[input1][POINT_X] = mousex
    points_list[input1][POINT_Y] = mousey+22
    points_list[output1][POINT_X] = mousex+42
    points_list[output1][POINT_Y] = mousey+22

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][NotGate_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+50 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+50 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][NotGate_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][NotGate_Input1])
          point_delete(compoent_list[handle][NotGate_Output1])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( NotGate, Mouse_Method, routine_id("mouseNotGate") )

procedure stepNotGate(integer handle)
  integer input1,output1

  input1=compoent_list[handle][NotGate_Input1]
  output1=compoent_list[handle][NotGate_Output1]

	if points_list[input1][POINT_STATE]=0  then
      if points_list[output1][POINT_STATE]=0 then
        send_signal(output1,1)
      end if
    else
     if points_list[output1][POINT_STATE]=1 then
       send_signal(output1,0)
     end if
   end if

end procedure

SetMethod( NotGate, Step_Method, routine_id("stepNotGate") )



procedure drawNotGate( integer handle )
  draw_sprite(buffer,logicgate_bitmaps[3],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( NotGate, Draw_Method, routine_id("drawNotGate") )


constant
    OrGate         = createclass( AndGate  )


procedure stepOrGate(integer handle)
  integer input1,input2,output1

  input1=compoent_list[handle][AndGate_Input1]
  input2=compoent_list[handle][AndGate_Input2]
  output1=compoent_list[handle][AndGate_Output1]

	if points_list[input1][POINT_STATE]=1 or points_list[input2][POINT_STATE]=1 then
      if points_list[output1][POINT_STATE]=0 then
        send_signal(output1,1)
      end if
    else
     if points_list[output1][POINT_STATE]=1 then
       send_signal(output1,0)
     end if
   end if
end procedure

SetMethod( OrGate, Step_Method, routine_id("stepOrGate") )


procedure drawOrGate( integer handle )
  draw_sprite(buffer,logicgate_bitmaps[4],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( OrGate, Draw_Method, routine_id("drawOrGate") )

constant
    NorGate         = createclass( AndGate  )


procedure stepNorGate(integer handle)
  integer input1,input2,output1

  input1=compoent_list[handle][AndGate_Input1]
  input2=compoent_list[handle][AndGate_Input2]
  output1=compoent_list[handle][AndGate_Output1]

	if points_list[input1][POINT_STATE]=0 and points_list[input2][POINT_STATE]=0 then
      if points_list[output1][POINT_STATE]=0 then
        send_signal(output1,1)
      end if
    else
     if points_list[output1][POINT_STATE]=1 then
       send_signal(output1,0)
     end if
   end if
end procedure

SetMethod( NorGate, Step_Method, routine_id("stepNorGate") )


procedure drawNorGate( integer handle )
  draw_sprite(buffer,logicgate_bitmaps[5],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( NorGate, Draw_Method, routine_id("drawNorGate") )


constant
    XorGate         = createclass( AndGate  )


procedure stepXorGate(integer handle)
  integer input1,input2,output1

  input1=compoent_list[handle][AndGate_Input1]
  input2=compoent_list[handle][AndGate_Input2]
  output1=compoent_list[handle][AndGate_Output1]

	if points_list[input1][POINT_STATE]=1 or points_list[input2][POINT_STATE]=1 then
	  if points_list[input1][POINT_STATE]=1 and points_list[input2][POINT_STATE]=1 then
        if points_list[output1][POINT_STATE]=1 then
          send_signal(output1,0)
        end if
      else
        if points_list[output1][POINT_STATE]=0 then
          send_signal(output1,1)
        end if
      end if

    else
     if points_list[output1][POINT_STATE]=1 then
       send_signal(output1,0)
     end if
   end if
end procedure

SetMethod( XorGate, Step_Method, routine_id("stepXorGate") )


procedure drawXorGate( integer handle )
  draw_sprite(buffer,logicgate_bitmaps[6],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( XorGate, Draw_Method, routine_id("drawXorGate") )

constant
    XnorGate         = createclass( AndGate  )


procedure stepXnorGate(integer handle)
  integer input1,input2,output1

  input1=compoent_list[handle][AndGate_Input1]
  input2=compoent_list[handle][AndGate_Input2]
  output1=compoent_list[handle][AndGate_Output1]

	if points_list[input1][POINT_STATE]=1 or points_list[input2][POINT_STATE]=1 then
	  if points_list[input1][POINT_STATE]=1 and points_list[input2][POINT_STATE]=1 then
        if points_list[output1][POINT_STATE]=0 then
          send_signal(output1,1)
        end if
      else
        if points_list[output1][POINT_STATE]=1 then
          send_signal(output1,0)
        end if
      end if

    else
     if points_list[output1][POINT_STATE]=0 then
       send_signal(output1,1)
     end if
   end if
end procedure

SetMethod( XnorGate, Step_Method, routine_id("stepXnorGate") )


procedure drawXnorGate( integer handle )
  draw_sprite(buffer,logicgate_bitmaps[7],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( XnorGate, Draw_Method, routine_id("drawXnorGate") )



constant
    OnOffSwitch         = createclass( Compoent ),
    OnOffSwitch_Input   = classvaraible(),
    OnOffSwitch_Output1 = classvaraible(),
    OnOffSwitch_Move    = classvaraible()

procedure initOnOffSwitch( integer handle )
  integer x,y,output1

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][OnOffSwitch_Input] = 0
  compoent_list[handle][OnOffSwitch_Output1] = point_create( x+16, y+4 )
  compoent_list[handle][OnOffSwitch_Move]    = 1

  output1=compoent_list[handle][OnOffSwitch_Output1]

  points_list[output1][POINT_TYPE]=point_output_type

  points_list[output1][POINT_PARENT_ID]=handle


  setTimer(CWindow1,1001,0)
end procedure

SetMethod( OnOffSwitch, Init_Method, routine_id("initOnOffSwitch") )

procedure mouseOnOffSwitch(integer handle)

  integer output1,offsetx,offsety
  if compoent_list[handle][OnOffSwitch_Move]  then
    offsetx=25
    offsety=25

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    output1=compoent_list[handle][OnOffSwitch_Output1]

    points_list[output1][POINT_X] = mousex+16
    points_list[output1][POINT_Y] = mousey+4

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][OnOffSwitch_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+16 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+16 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][OnOffSwitch_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][OnOffSwitch_Output1])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      elsif mouse_button=1 and islinking=0 then
      	compoent_list[handle][OnOffSwitch_Input]=not(compoent_list[handle][OnOffSwitch_Input])
      	--setTimer(CWindow1,1001,0)
      end if

    end if
  end if

end procedure

SetMethod( OnOffSwitch, Mouse_Method, routine_id("mouseOnOffSwitch") )

procedure stepOnOffSwitch(integer handle)
  integer input,output1

  input=compoent_list[handle][OnOffSwitch_Input]
  output1=compoent_list[handle][OnOffSwitch_Output1]

  if input=1 then
    if points_list[output1][POINT_STATE]=0 then
      send_signal(output1,1)
      points_list[output1][POINT_STATE]=1
    end if
  else
    if points_list[output1][POINT_STATE]=1 then
      send_signal(output1,0)
      points_list[output1][POINT_STATE]=0
    end if
  end if

end procedure

SetMethod( OnOffSwitch, Step_Method, routine_id("stepOnOffSwitch") )

procedure drawOnOffSwitch( integer handle )
  integer output1
  output1=compoent_list[handle][OnOffSwitch_Output1]
  if points_list[output1][POINT_STATE]=1 then
  	draw_sprite(buffer,onoffswitch_bitmaps[2],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
  else
    draw_sprite(buffer,onoffswitch_bitmaps[1],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
  end if

end procedure

SetMethod( OnOffSwitch, Draw_Method, routine_id("drawOnOffSwitch") )


constant
    Clock         = createclass( Compoent ),
    Clock_Input   = classvaraible(),
    Clock_Output1 = classvaraible(),
    Clock_Move    = classvaraible()

procedure initClock( integer handle )
  integer x,y,output1

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][Clock_Input] = 0
  compoent_list[handle][Clock_Output1] = point_create( x+16, y+4 )
  compoent_list[handle][Clock_Move]    = 1

  output1=compoent_list[handle][Clock_Output1]

  points_list[output1][POINT_TYPE]=point_output_type

  points_list[output1][POINT_PARENT_ID]=handle


  setTimer(CWindow1,1001,0)
end procedure

SetMethod( Clock, Init_Method, routine_id("initClock") )

procedure mouseClock(integer handle)

  integer output1,offsetx,offsety
  if compoent_list[handle][Clock_Move]  then
    offsetx=25
    offsety=25

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    output1=compoent_list[handle][Clock_Output1]

    points_list[output1][POINT_X] = mousex+16
    points_list[output1][POINT_Y] = mousey+4

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][Clock_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+16 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+16 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][Clock_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][Clock_Output1])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      end if

    end if
  end if

end procedure

SetMethod( Clock, Mouse_Method, routine_id("mouseClock") )

procedure stepClock(integer handle)
  integer input,output1

  input=compoent_list[handle][Clock_Input]
  output1=compoent_list[handle][Clock_Output1]

  if input=1 then
    if points_list[output1][POINT_STATE]=0 then
      send_signal(output1,1)
      points_list[output1][POINT_STATE]=1
    end if
  else
    if points_list[output1][POINT_STATE]=1 then
      send_signal(output1,0)
      points_list[output1][POINT_STATE]=0
    end if
  end if

  compoent_list[handle][Clock_Input]=not(compoent_list[handle][Clock_Input])

end procedure

SetMethod( Clock, Step_Method, routine_id("stepClock") )

procedure drawClock( integer handle )
  integer output1
  output1=compoent_list[handle][Clock_Output1]
  if points_list[output1][POINT_STATE]=1 then
  	draw_sprite(buffer,clock_bitmaps[2],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
  else
    draw_sprite(buffer,clock_bitmaps[1],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
  end if

end procedure

SetMethod( Clock, Draw_Method, routine_id("drawClock") )


constant
    FullAdder          = createclass( Compoent ),
    FullAdder_Input1  = classvaraible(),
    FullAdder_Input2  = classvaraible(),
    FullAdder_Input3  = classvaraible(),
    FullAdder_Output1  = classvaraible(),
    FullAdder_Output2  = classvaraible(),
    FullAdder_Move    = classvaraible()

procedure initFullAdder( integer handle )
  integer x,y,input1,input2,input3,output1,output2

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][FullAdder_Input1]  = point_create( x, y+12 )
  compoent_list[handle][FullAdder_Input2]  = point_create( x, y+24 )
  compoent_list[handle][FullAdder_Input3]  = point_create( x, y+36 )
  compoent_list[handle][FullAdder_Output1]  = point_create( x, y+48 )
  compoent_list[handle][FullAdder_Output2]  = point_create( x, y+60 )

  compoent_list[handle][FullAdder_Move]    = 1

  input1=compoent_list[handle][FullAdder_Input1]
  input2=compoent_list[handle][FullAdder_Input2]
  input3=compoent_list[handle][FullAdder_Input3]
  output1=compoent_list[handle][FullAdder_Output1]
  output2=compoent_list[handle][FullAdder_Output2]

  points_list[input1][POINT_TYPE]=point_input_type
  points_list[input2][POINT_TYPE]=point_input_type
  points_list[input3][POINT_TYPE]=point_input_type
  points_list[output1][POINT_TYPE]=point_output_type
  points_list[output1][POINT_TYPE]=point_output_type

  points_list[input1][POINT_PARENT_ID]=handle
  points_list[input2][POINT_PARENT_ID]=handle
  points_list[input3][POINT_PARENT_ID]=handle
  points_list[output1][POINT_PARENT_ID]=handle
  points_list[output2][POINT_PARENT_ID]=handle

  setTimer(CWindow1,1001,0)
end procedure

SetMethod( FullAdder, Init_Method, routine_id("initFullAdder") )


procedure mouseFullAdder(integer handle)

  integer input1,input2,input3,output1,output2,offsetx,offsety

  if compoent_list[handle][FullAdder_Move]  then
    offsetx=25
    offsety=25

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    input1=compoent_list[handle][FullAdder_Input1]
    input2=compoent_list[handle][FullAdder_Input2]
    input3=compoent_list[handle][FullAdder_Input3]
    output1=compoent_list[handle][FullAdder_Output1]
    output2=compoent_list[handle][FullAdder_Output2]

    points_list[input1][POINT_X] = mousex
    points_list[input1][POINT_Y] = mousey+24
    points_list[input2][POINT_X] = mousex
    points_list[input2][POINT_Y] = mousey+60
    points_list[input3][POINT_X] = mousex
    points_list[input3][POINT_Y] = mousey+96
    points_list[output1][POINT_X] = mousex+100
    points_list[output1][POINT_Y] = mousey+24
    points_list[output2][POINT_X] = mousex+100
    points_list[output2][POINT_Y] = mousey+96

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][FullAdder_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+90 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+120 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][FullAdder_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][FullAdder_Input1])
          point_delete(compoent_list[handle][FullAdder_Input2])
          point_delete(compoent_list[handle][FullAdder_Input3])
          point_delete(compoent_list[handle][FullAdder_Output1])
          point_delete(compoent_list[handle][FullAdder_Output2])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( FullAdder, Mouse_Method, routine_id("mouseFullAdder") )



procedure stepFullAdder(integer handle)
  integer input1,input2,input3,output1,output2

  input1=compoent_list[handle][FullAdder_Input1]
  input2=compoent_list[handle][FullAdder_Input2]
  input3=compoent_list[handle][FullAdder_Input3]
  output1=compoent_list[handle][FullAdder_Output1]
  output2=compoent_list[handle][FullAdder_Output2]

  if points_list[input1][POINT_STATE]=0 and points_list[input2][POINT_STATE]=0 and points_list[input3][POINT_STATE]=0 then-- none
    send_signal(output1,0)
    send_signal(output2,0)
  elsif points_list[input1][POINT_STATE]=1 and points_list[input2][POINT_STATE]=0 and points_list[input3][POINT_STATE]=0 then--just a
  	send_signal(output1,1)
  	send_signal(output2,0)
  elsif points_list[input1][POINT_STATE]=0 and points_list[input2][POINT_STATE]=1 and points_list[input3][POINT_STATE]=0 then--just b
  	send_signal(output1,1)
  	send_signal(output2,0)
  elsif points_list[input1][POINT_STATE]=1 and points_list[input2][POINT_STATE]=1 and points_list[input3][POINT_STATE]=0 then--a and b
  	send_signal(output1,0)
  	send_signal(output2,1)
  elsif points_list[input1][POINT_STATE]=1 and points_list[input2][POINT_STATE]=1 and points_list[input3][POINT_STATE]=1 then--a b c
  	send_signal(output1,1)
  	send_signal(output2,1)
  elsif points_list[input1][POINT_STATE]=0 and points_list[input2][POINT_STATE]=0 and points_list[input3][POINT_STATE]=1 then--just c
  	send_signal(output1,1)
  	send_signal(output2,0)
  elsif points_list[input1][POINT_STATE]=1 and points_list[input2][POINT_STATE]=0 and points_list[input3][POINT_STATE]=1 then--a and c
  	send_signal(output1,0)
  	send_signal(output2,1)
  elsif points_list[input1][POINT_STATE]=0 and points_list[input2][POINT_STATE]=1 and points_list[input3][POINT_STATE]=1 then--b and c
  	send_signal(output1,0)
  	send_signal(output2,1)
  end if

end procedure

SetMethod( FullAdder, Step_Method, routine_id("stepFullAdder") )



procedure drawFullAdder( integer handle )
  draw_sprite(buffer,ic_bitmaps[6],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( FullAdder, Draw_Method, routine_id("drawFullAdder") )


constant
    BitKeyPad          = createclass( Compoent ),
    BitKeyPad_Output1  = classvaraible(),
    BitKeyPad_Output2  = classvaraible(),
    BitKeyPad_Output3  = classvaraible(),
    BitKeyPad_Output4  = classvaraible(),
    BitKeyPad_Output5  = classvaraible(),
    BitKeyPad_Output6  = classvaraible(),
    BitKeyPad_Output7  = classvaraible(),
    BitKeyPad_Output8  = classvaraible(),
    BitKeyPad_Value   = classvaraible(),
    BitKeyPad_Move    = classvaraible()

procedure initBitKeyPad( integer handle )
  integer x,y,output1,output2,output3,output4,output5,output6,output7,output8

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][BitKeyPad_Output1]  = point_create( x, y+12 )
  compoent_list[handle][BitKeyPad_Output2]  = point_create( x, y+24 )
  compoent_list[handle][BitKeyPad_Output3]  = point_create( x, y+36 )
  compoent_list[handle][BitKeyPad_Output4]  = point_create( x, y+48 )
  compoent_list[handle][BitKeyPad_Output5]  = point_create( x, y+60 )
  compoent_list[handle][BitKeyPad_Output6]  = point_create( x, y+72 )
  compoent_list[handle][BitKeyPad_Output7]  = point_create( x, y+84 )
  compoent_list[handle][BitKeyPad_Output8]  = point_create( x, y+96 )

  compoent_list[handle][BitKeyPad_Value]   = 0
  compoent_list[handle][BitKeyPad_Move]    = 1

  output1=compoent_list[handle][BitKeyPad_Output1]
  output2=compoent_list[handle][BitKeyPad_Output2]
  output3=compoent_list[handle][BitKeyPad_Output3]
  output4=compoent_list[handle][BitKeyPad_Output4]
  output5=compoent_list[handle][BitKeyPad_Output5]
  output6=compoent_list[handle][BitKeyPad_Output6]
  output7=compoent_list[handle][BitKeyPad_Output7]
  output8=compoent_list[handle][BitKeyPad_Output8]

  points_list[output1][POINT_TYPE]=point_output_type
  points_list[output2][POINT_TYPE]=point_output_type
  points_list[output3][POINT_TYPE]=point_output_type
  points_list[output4][POINT_TYPE]=point_output_type
  points_list[output5][POINT_TYPE]=point_output_type
  points_list[output6][POINT_TYPE]=point_output_type
  points_list[output7][POINT_TYPE]=point_output_type
  points_list[output8][POINT_TYPE]=point_output_type

  points_list[output1][POINT_PARENT_ID]=handle
  points_list[output2][POINT_PARENT_ID]=handle
  points_list[output3][POINT_PARENT_ID]=handle
  points_list[output4][POINT_PARENT_ID]=handle
  points_list[output5][POINT_PARENT_ID]=handle
  points_list[output6][POINT_PARENT_ID]=handle
  points_list[output7][POINT_PARENT_ID]=handle
  points_list[output8][POINT_PARENT_ID]=handle


  setTimer(CWindow1,1001,0)
end procedure

SetMethod( BitKeyPad, Init_Method, routine_id("initBitKeyPad") )


procedure mouseBitKeyPad(integer handle)

  integer output1,output2,output3,output4,output5,output6,output7,output8,offsetx,offsety
  integer posx,posy
  sequence text
  if compoent_list[handle][BitKeyPad_Move]  then
    offsetx=25
    offsety=25

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    output1=compoent_list[handle][BitKeyPad_Output1]
    output2=compoent_list[handle][BitKeyPad_Output2]
    output3=compoent_list[handle][BitKeyPad_Output3]
    output4=compoent_list[handle][BitKeyPad_Output4]
    output5=compoent_list[handle][BitKeyPad_Output5]
    output6=compoent_list[handle][BitKeyPad_Output6]
    output7=compoent_list[handle][BitKeyPad_Output7]
    output8=compoent_list[handle][BitKeyPad_Output8]

    points_list[output1][POINT_X] = mousex
    points_list[output1][POINT_Y] = mousey+12
    points_list[output2][POINT_X] = mousex
    points_list[output2][POINT_Y] = mousey+24
    points_list[output3][POINT_X] = mousex
    points_list[output3][POINT_Y] = mousey+36
    points_list[output4][POINT_X] = mousex
    points_list[output4][POINT_Y] = mousey+48
    points_list[output5][POINT_X] = mousex
    points_list[output5][POINT_Y] = mousey+60
    points_list[output6][POINT_X] = mousex
    points_list[output6][POINT_Y] = mousey+72
    points_list[output7][POINT_X] = mousex
    points_list[output7][POINT_Y] = mousey+84
    points_list[output8][POINT_X] = mousex
    points_list[output8][POINT_Y] = mousey+96

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][BitKeyPad_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+90 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+120 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][BitKeyPad_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][BitKeyPad_Output1])
          point_delete(compoent_list[handle][BitKeyPad_Output2])
          point_delete(compoent_list[handle][BitKeyPad_Output3])
          point_delete(compoent_list[handle][BitKeyPad_Output4])
          point_delete(compoent_list[handle][BitKeyPad_Output5])
          point_delete(compoent_list[handle][BitKeyPad_Output6])
          point_delete(compoent_list[handle][BitKeyPad_Output7])
          point_delete(compoent_list[handle][BitKeyPad_Output8])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      elsif mouse_button=1 and islinking=0 and running=1 then
      	posx=mousex-compoent_list[handle][XPosition]
      	posy=mousey-compoent_list[handle][YPosition]
      	
        setTimer(CWindow1,1001,1)

      	if posx>=0 and posx<=30 and posy>=0 and posy<=30 then-- number 1
      	  if compoent_list[handle][BitKeyPad_Value]=0 then
      	    compoent_list[handle][BitKeyPad_Value]=1
      	  else
	        text=sprint(compoent_list[handle][BitKeyPad_Value])
      	    text&='1'
      	    compoent_list[handle][BitKeyPad_Value]=real(text)
      	    if compoent_list[handle][BitKeyPad_Value]>255 then
      	      compoent_list[handle][BitKeyPad_Value]=0
      	    end if
      	  end if
      	elsif posx>=30 and posx<=60 and posy>=0 and posy<=30 then-- number 2
      	  if compoent_list[handle][BitKeyPad_Value]=0 then
      	    compoent_list[handle][BitKeyPad_Value]=2
      	  else
	        text=sprint(compoent_list[handle][BitKeyPad_Value])
      	    text&='2'
      	    compoent_list[handle][BitKeyPad_Value]=real(text)
      	    if compoent_list[handle][BitKeyPad_Value]>255 then
      	      compoent_list[handle][BitKeyPad_Value]=0
      	    end if
      	  end if
        elsif posx>=60 and posx<=90 and posy>=0 and posy<=30 then-- number 3
      	  if compoent_list[handle][BitKeyPad_Value]=0 then
      	    compoent_list[handle][BitKeyPad_Value]=3
      	  else
	        text=sprint(compoent_list[handle][BitKeyPad_Value])
      	    text&='3'
      	    compoent_list[handle][BitKeyPad_Value]=real(text)
      	    if compoent_list[handle][BitKeyPad_Value]>255 then
      	      compoent_list[handle][BitKeyPad_Value]=0
      	    end if
      	  end if	
        elsif posx>=0 and posx<=30 and posy>=30 and posy<=60 then-- number 4
	      if compoent_list[handle][BitKeyPad_Value]=0 then
      	    compoent_list[handle][BitKeyPad_Value]=4
      	  else
	        text=sprint(compoent_list[handle][BitKeyPad_Value])
      	    text&='4'
      	    compoent_list[handle][BitKeyPad_Value]=real(text)
      	    if compoent_list[handle][BitKeyPad_Value]>255 then
      	      compoent_list[handle][BitKeyPad_Value]=0
      	    end if
      	  end if
        elsif posx>=30 and posx<=60 and posy>=30 and posy<=60 then-- number 5
          if compoent_list[handle][BitKeyPad_Value]=0 then
      	    compoent_list[handle][BitKeyPad_Value]=5
      	  else
	        text=sprint(compoent_list[handle][BitKeyPad_Value])
      	    text&='5'
      	    compoent_list[handle][BitKeyPad_Value]=real(text)
      	    if compoent_list[handle][BitKeyPad_Value]>255 then
      	      compoent_list[handle][BitKeyPad_Value]=0
      	    end if
      	  end if
        elsif posx>=60 and posx<=90 and posy>=30 and posy<=60 then-- number 6
          if compoent_list[handle][BitKeyPad_Value]=0 then
      	    compoent_list[handle][BitKeyPad_Value]=6
      	  else
	        text=sprint(compoent_list[handle][BitKeyPad_Value])
      	    text&='6'
      	    compoent_list[handle][BitKeyPad_Value]=real(text)
      	    if compoent_list[handle][BitKeyPad_Value]>255 then
      	      compoent_list[handle][BitKeyPad_Value]=0
      	    end if
      	  end if
        elsif posx>=0 and posx<=30 and posy>=60 and posy<=90 then-- number 7
          if compoent_list[handle][BitKeyPad_Value]=0 then
      	    compoent_list[handle][BitKeyPad_Value]=7
      	  else
	        text=sprint(compoent_list[handle][BitKeyPad_Value])
      	    text&='7'
      	    compoent_list[handle][BitKeyPad_Value]=real(text)
      	    if compoent_list[handle][BitKeyPad_Value]>255 then
      	      compoent_list[handle][BitKeyPad_Value]=0
      	    end if
      	  end if
        elsif posx>=30 and posx<=60 and posy>=60 and posy<=90 then-- number 8
          if compoent_list[handle][BitKeyPad_Value]=0 then
      	    compoent_list[handle][BitKeyPad_Value]=8
      	  else
	        text=sprint(compoent_list[handle][BitKeyPad_Value])
      	    text&='8'
      	    compoent_list[handle][BitKeyPad_Value]=real(text)
      	    if compoent_list[handle][BitKeyPad_Value]>255 then
      	      compoent_list[handle][BitKeyPad_Value]=0
      	    end if
      	  end if
        elsif posx>=60 and posx<=90 and posy>=60 and posy<=90 then-- number 9
          if compoent_list[handle][BitKeyPad_Value]=0 then
      	    compoent_list[handle][BitKeyPad_Value]=9
      	  else
	        text=sprint(compoent_list[handle][BitKeyPad_Value])
      	    text&='9'
      	    compoent_list[handle][BitKeyPad_Value]=real(text)
      	    if compoent_list[handle][BitKeyPad_Value]>255 then
      	      compoent_list[handle][BitKeyPad_Value]=0
      	    end if
      	  end if
        elsif posx>=30 and posx<=60 and posy>=90 and posy<=120 then-- number 0
          if compoent_list[handle][BitKeyPad_Value]=0 then
      	    compoent_list[handle][BitKeyPad_Value]=0
      	  else
	        text=sprint(compoent_list[handle][BitKeyPad_Value])
      	    text&='0'
      	    compoent_list[handle][BitKeyPad_Value]=real(text)
      	    if compoent_list[handle][BitKeyPad_Value]>255 then
      	      compoent_list[handle][BitKeyPad_Value]=0
      	    end if
      	  end if
      	end if
      end if
    end if
  end if

end procedure

SetMethod( BitKeyPad, Mouse_Method, routine_id("mouseBitKeyPad") )


procedure stepBitKeyPad(integer handle)
  integer output1,output2,output3,output4,output5,output6,output7,output8,ii
  sequence bits
  output1=compoent_list[handle][BitKeyPad_Output1]
  output2=compoent_list[handle][BitKeyPad_Output2]
  output3=compoent_list[handle][BitKeyPad_Output3]
  output4=compoent_list[handle][BitKeyPad_Output4]
  output5=compoent_list[handle][BitKeyPad_Output5]
  output6=compoent_list[handle][BitKeyPad_Output6]
  output7=compoent_list[handle][BitKeyPad_Output7]
  output8=compoent_list[handle][BitKeyPad_Output8]


  bits=dec_to_binary(compoent_list[handle][BitKeyPad_Value])
  ii=1
  for i=length(bits) to 24 by -1 do
  	if ii=1 then
  	  if points_list[output1][POINT_STATE]!=bits[i] then
  	  	send_signal(output1,bits[i])
  	  end if
  	elsif ii=2 then
  	  if points_list[output2][POINT_STATE]!=bits[i] then
  	  	send_signal(output2,bits[i])
  	  end if
    elsif ii=3 then
  	  if points_list[output3][POINT_STATE]!=bits[i] then
  	  	send_signal(output3,bits[i])
  	  end if
	elsif ii=4 then
  	  if points_list[output4][POINT_STATE]!=bits[i] then
  	  	send_signal(output4,bits[i])
  	  end if
  	elsif ii=5 then
  	  if points_list[output5][POINT_STATE]!=bits[i] then
  	  	send_signal(output5,bits[i])
  	  end if
  	elsif ii=6 then
  	  if points_list[output6][POINT_STATE]!=bits[i] then
  	  	send_signal(output6,bits[i])
  	  end if
  	elsif ii=7 then
  	  if points_list[output7][POINT_STATE]!=bits[i] then
  	  	send_signal(output7,bits[i])
  	  end if
  	elsif ii=8 then
  	  if points_list[output8][POINT_STATE]!=bits[i] then
  	  	send_signal(output8,bits[i])
  	  end if
  	end if
  	ii+=1
  end for

end procedure

SetMethod( BitKeyPad, Step_Method, routine_id("stepBitKeyPad") )



procedure drawBitKeyPad( integer handle )
  draw_sprite(buffer,ic_bitmaps[5],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
  allegro:textout_ex(buffer,font, sprint(compoent_list[handle][BitKeyPad_Value]) ,(compoent_list[handle][XPosition]-view_left)+20 , (compoent_list[handle][YPosition]-view_top)-16 , makecol(255,0,0),-1 )
end procedure

SetMethod( BitKeyPad, Draw_Method, routine_id("drawBitKeyPad") )



constant
    BitDisplay         = createclass( Compoent ),
    BitDisplay_Input1  = classvaraible(),
    BitDisplay_Input2  = classvaraible(),
    BitDisplay_Input3  = classvaraible(),
    BitDisplay_Input4  = classvaraible(),
    BitDisplay_Input5  = classvaraible(),
    BitDisplay_Input6  = classvaraible(),
    BitDisplay_Input7  = classvaraible(),
    BitDisplay_Input8  = classvaraible(),
    BitDisplay_Value   = classvaraible(),
    BitDisplay_Move    = classvaraible()

procedure initBitDisplay( integer handle )
  integer x,y,input1,input2,input3,input4,input5,input6,input7,input8

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][BitDisplay_Input1]  = point_create( x, y+12 )
  compoent_list[handle][BitDisplay_Input2]  = point_create( x, y+24 )
  compoent_list[handle][BitDisplay_Input3]  = point_create( x, y+36 )
  compoent_list[handle][BitDisplay_Input4]  = point_create( x, y+48 )
  compoent_list[handle][BitDisplay_Input5]  = point_create( x, y+60 )
  compoent_list[handle][BitDisplay_Input6]  = point_create( x, y+72 )
  compoent_list[handle][BitDisplay_Input7]  = point_create( x, y+84 )
  compoent_list[handle][BitDisplay_Input8]  = point_create( x, y+96 )

  compoent_list[handle][BitDisplay_Value]   = 0
  compoent_list[handle][BitDisplay_Move]    = 1

  input1=compoent_list[handle][BitDisplay_Input1]
  input2=compoent_list[handle][BitDisplay_Input2]
  input3=compoent_list[handle][BitDisplay_Input3]
  input4=compoent_list[handle][BitDisplay_Input4]
  input5=compoent_list[handle][BitDisplay_Input5]
  input6=compoent_list[handle][BitDisplay_Input6]
  input7=compoent_list[handle][BitDisplay_Input7]
  input8=compoent_list[handle][BitDisplay_Input8]

  points_list[input1][POINT_TYPE]=point_input_type
  points_list[input2][POINT_TYPE]=point_input_type
  points_list[input3][POINT_TYPE]=point_input_type
  points_list[input4][POINT_TYPE]=point_input_type
  points_list[input5][POINT_TYPE]=point_input_type
  points_list[input6][POINT_TYPE]=point_input_type
  points_list[input7][POINT_TYPE]=point_input_type
  points_list[input8][POINT_TYPE]=point_input_type

  points_list[input1][POINT_PARENT_ID]=handle
  points_list[input2][POINT_PARENT_ID]=handle
  points_list[input3][POINT_PARENT_ID]=handle
  points_list[input4][POINT_PARENT_ID]=handle
  points_list[input5][POINT_PARENT_ID]=handle
  points_list[input6][POINT_PARENT_ID]=handle
  points_list[input7][POINT_PARENT_ID]=handle
  points_list[input8][POINT_PARENT_ID]=handle


  setTimer(CWindow1,1001,0)
end procedure

SetMethod( BitDisplay, Init_Method, routine_id("initBitDisplay") )

procedure mouseBitDisplay(integer handle)

  integer input1,input2,input3,input4,input5,input6,input7,input8,offsetx,offsety
  if compoent_list[handle][BitDisplay_Move]  then
    offsetx=25
    offsety=25

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    input1=compoent_list[handle][BitDisplay_Input1]
    input2=compoent_list[handle][BitDisplay_Input2]
    input3=compoent_list[handle][BitDisplay_Input3]
    input4=compoent_list[handle][BitDisplay_Input4]
    input5=compoent_list[handle][BitDisplay_Input5]
    input6=compoent_list[handle][BitDisplay_Input6]
    input7=compoent_list[handle][BitDisplay_Input7]
    input8=compoent_list[handle][BitDisplay_Input8]

    points_list[input1][POINT_X] = mousex
    points_list[input1][POINT_Y] = mousey+12
    points_list[input2][POINT_X] = mousex
    points_list[input2][POINT_Y] = mousey+24
    points_list[input3][POINT_X] = mousex
    points_list[input3][POINT_Y] = mousey+36
    points_list[input4][POINT_X] = mousex
    points_list[input4][POINT_Y] = mousey+48
    points_list[input5][POINT_X] = mousex
    points_list[input5][POINT_Y] = mousey+60
    points_list[input6][POINT_X] = mousex
    points_list[input6][POINT_Y] = mousey+72
    points_list[input7][POINT_X] = mousex
    points_list[input7][POINT_Y] = mousey+84
    points_list[input8][POINT_X] = mousex
    points_list[input8][POINT_Y] = mousey+96

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][BitDisplay_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+20 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+60 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][BitDisplay_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][BitDisplay_Input1])
          point_delete(compoent_list[handle][BitDisplay_Input2])
          point_delete(compoent_list[handle][BitDisplay_Input3])
          point_delete(compoent_list[handle][BitDisplay_Input4])
          point_delete(compoent_list[handle][BitDisplay_Input5])
          point_delete(compoent_list[handle][BitDisplay_Input6])
          point_delete(compoent_list[handle][BitDisplay_Input7])
          point_delete(compoent_list[handle][BitDisplay_Input8])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( BitDisplay, Mouse_Method, routine_id("mouseBitDisplay") )

procedure stepBitDisplay(integer handle)
  integer input1,input2,input3,input4,input5,input6,input7,input8,val

  input1=compoent_list[handle][BitDisplay_Input1]
  input2=compoent_list[handle][BitDisplay_Input2]
  input3=compoent_list[handle][BitDisplay_Input3]
  input4=compoent_list[handle][BitDisplay_Input4]
  input5=compoent_list[handle][BitDisplay_Input5]
  input6=compoent_list[handle][BitDisplay_Input6]
  input7=compoent_list[handle][BitDisplay_Input7]
  input8=compoent_list[handle][BitDisplay_Input8]

  val=binary_to_dec({points_list[input8][POINT_STATE],points_list[input7][POINT_STATE],points_list[input6][POINT_STATE],points_list[input5][POINT_STATE],
  points_list[input4][POINT_STATE],points_list[input3][POINT_STATE],points_list[input2][POINT_STATE],points_list[input1][POINT_STATE]})
  compoent_list[handle][BitDisplay_Value]=val

end procedure

SetMethod( BitDisplay, Step_Method, routine_id("stepBitDisplay") )


procedure drawBitDisplay( integer handle )
  allegro:textout_ex(buffer,font, sprint(compoent_list[handle][BitDisplay_Value]) ,(compoent_list[handle][XPosition]-view_left)+20 , (compoent_list[handle][YPosition]-view_top)+20 , makecol(255,0,0),-1 )
end procedure

SetMethod( BitDisplay, Draw_Method, routine_id("drawBitDisplay") )


constant
    TextLable         = createclass( Compoent ),
    TextLable_Move    = classvaraible()

procedure initTextLable( integer handle )
  integer x,y

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][TextName]="No Label"
  compoent_list[handle][TextLable_Move] = 1

  setTimer(CWindow1,1001,0)
end procedure

SetMethod( TextLable, Init_Method, routine_id("initTextLable") )

procedure mouseTextLable(integer handle)
  integer width
  width=length(compoent_list[handle][TextName])*8

  if compoent_list[handle][TextLable_Move]  then


  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey


    if mouse_button=1 then
      compoent_list[handle][TextLable_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+width and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+20 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        setEnable(PopupItem_104,1)
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        setEnable(PopupItem_104,0)
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][TextLable_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        elsif compoent_popup_command=3 then
          openWindow(Window3,Modal)	
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( TextLable, Mouse_Method, routine_id("mouseTextLable") )


procedure drawTextLable( integer handle )
  allegro:textout_ex(buffer,font, compoent_list[handle][TextName] ,(compoent_list[handle][XPosition]-view_left) , (compoent_list[handle][YPosition]-view_top) , makecol(0,0,0),-1 )
end procedure

SetMethod( TextLable, Draw_Method, routine_id("drawTextLable") )


constant
    LedRed         = createclass( Compoent ),
    LedRed_Input1  = classvaraible(),
    LedRed_Move    = classvaraible()

procedure initLedRed( integer handle )
  integer x,y,input1

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][TextName]="LedRed"
  compoent_list[handle][LedRed_Input1]  = point_create( x, y+12 )
  compoent_list[handle][LedRed_Move]    = 1

  input1=compoent_list[handle][LedRed_Input1]

  points_list[input1][POINT_TYPE]=point_input_type

  points_list[input1][POINT_PARENT_ID]=handle

  setTimer(CWindow1,1001,0)
end procedure

SetMethod( LedRed, Init_Method, routine_id("initLedRed") )

procedure mouseLedRed(integer handle)

  integer input1
  if compoent_list[handle][LedRed_Move]  then

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    input1=compoent_list[handle][LedRed_Input1]

    points_list[input1][POINT_X] = mousex-12
    points_list[input1][POINT_Y] = mousey+5

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][LedRed_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+18 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+18 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][LedRed_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][LedRed_Input1])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( LedRed, Mouse_Method, routine_id("mouseLedRed") )


procedure drawLedRed( integer handle )
  integer input1

  input1=compoent_list[handle][LedRed_Input1]
  if points_list[input1][POINT_STATE]=0 then
    draw_sprite(buffer,led_bitmaps[1],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
  else
	draw_sprite(buffer,led_bitmaps[2],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
  end if

end procedure

SetMethod( LedRed, Draw_Method, routine_id("drawLedRed") )


--=================================================new cpu components==========================================--
constant
    Register8Bit          = createclass( Compoent ),
    Register8Bit_Input1   = classvaraible(),
    Register8Bit_Input2   = classvaraible(),
    Register8Bit_Input3   = classvaraible(),
    Register8Bit_Input4   = classvaraible(),
    Register8Bit_Input5   = classvaraible(),
    Register8Bit_Input6   = classvaraible(),
    Register8Bit_Input7   = classvaraible(),
    Register8Bit_Input8   = classvaraible(),
    Register8Bit_Input9   = classvaraible(),--enable input
    Register8Bit_Input10  = classvaraible(),--enable output
    Register8Bit_Output1  = classvaraible(),
    Register8Bit_Output2  = classvaraible(),
    Register8Bit_Output3  = classvaraible(),
    Register8Bit_Output4  = classvaraible(),
    Register8Bit_Output5  = classvaraible(),
    Register8Bit_Output6  = classvaraible(),
    Register8Bit_Output7  = classvaraible(),
    Register8Bit_Output8  = classvaraible(),
    Register8Bit_Move     = classvaraible(),
    Register8Bit_Value    = classvaraible()

procedure initRegister8Bit( integer handle )
  integer x,y,input1,input2,input3,input4,input5,input6,input7,input8,input9,input10
  integer output1,output2,output3,output4,output5,output6,output7,output8

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][TextName]="8 Bit Register"

  compoent_list[handle][Register8Bit_Input1]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Input2]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Input3]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Input4]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Input5]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Input6]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Input7]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Input8]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Input9]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Input10]  = point_create( x, y+12 )

  compoent_list[handle][Register8Bit_Output1]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Output2]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Output3]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Output4]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Output5]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Output6]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Output7]  = point_create( x, y+12 )
  compoent_list[handle][Register8Bit_Output8]  = point_create( x, y+12 )

  compoent_list[handle][Register8Bit_Move]    = 1
  compoent_list[handle][Register8Bit_Value]   = 0

  input1=compoent_list[handle][Register8Bit_Input1]
  input2=compoent_list[handle][Register8Bit_Input2]
  input3=compoent_list[handle][Register8Bit_Input3]
  input4=compoent_list[handle][Register8Bit_Input4]
  input5=compoent_list[handle][Register8Bit_Input5]
  input6=compoent_list[handle][Register8Bit_Input6]
  input7=compoent_list[handle][Register8Bit_Input7]
  input8=compoent_list[handle][Register8Bit_Input8]
  input9=compoent_list[handle][Register8Bit_Input9]
  input10=compoent_list[handle][Register8Bit_Input10]

  output1=compoent_list[handle][Register8Bit_Output1]
  output2=compoent_list[handle][Register8Bit_Output2]
  output3=compoent_list[handle][Register8Bit_Output3]
  output4=compoent_list[handle][Register8Bit_Output4]
  output5=compoent_list[handle][Register8Bit_Output5]
  output6=compoent_list[handle][Register8Bit_Output6]
  output7=compoent_list[handle][Register8Bit_Output7]
  output8=compoent_list[handle][Register8Bit_Output8]

  points_list[input1][POINT_TYPE]=point_input_type
  points_list[input2][POINT_TYPE]=point_input_type
  points_list[input3][POINT_TYPE]=point_input_type
  points_list[input4][POINT_TYPE]=point_input_type
  points_list[input5][POINT_TYPE]=point_input_type
  points_list[input6][POINT_TYPE]=point_input_type
  points_list[input7][POINT_TYPE]=point_input_type
  points_list[input8][POINT_TYPE]=point_input_type
  points_list[input9][POINT_TYPE]=point_input_type
  points_list[input10][POINT_TYPE]=point_input_type

  points_list[output1][POINT_TYPE]=point_output_type
  points_list[output2][POINT_TYPE]=point_output_type
  points_list[output3][POINT_TYPE]=point_output_type
  points_list[output4][POINT_TYPE]=point_output_type
  points_list[output5][POINT_TYPE]=point_output_type
  points_list[output6][POINT_TYPE]=point_output_type
  points_list[output7][POINT_TYPE]=point_output_type
  points_list[output8][POINT_TYPE]=point_output_type

  points_list[input1][POINT_PARENT_ID]=handle
  points_list[input2][POINT_PARENT_ID]=handle
  points_list[input3][POINT_PARENT_ID]=handle
  points_list[input4][POINT_PARENT_ID]=handle
  points_list[input5][POINT_PARENT_ID]=handle
  points_list[input6][POINT_PARENT_ID]=handle
  points_list[input7][POINT_PARENT_ID]=handle
  points_list[input8][POINT_PARENT_ID]=handle
  points_list[input9][POINT_PARENT_ID]=handle
  points_list[input10][POINT_PARENT_ID]=handle

  points_list[output1][POINT_PARENT_ID]=handle
  points_list[output2][POINT_PARENT_ID]=handle
  points_list[output3][POINT_PARENT_ID]=handle
  points_list[output4][POINT_PARENT_ID]=handle
  points_list[output5][POINT_PARENT_ID]=handle
  points_list[output6][POINT_PARENT_ID]=handle
  points_list[output7][POINT_PARENT_ID]=handle
  points_list[output8][POINT_PARENT_ID]=handle

  setTimer(CWindow1,1001,0)
end procedure

SetMethod( Register8Bit, Init_Method, routine_id("initRegister8Bit") )

procedure mouseRegister8Bit(integer handle)

  integer input1,input2,input3,input4,input5,input6,input7,input8,input9,input10
  integer output1,output2,output3,output4,output5,output6,output7,output8

  if compoent_list[handle][Register8Bit_Move]  then

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    input1=compoent_list[handle][Register8Bit_Input1]
    input2=compoent_list[handle][Register8Bit_Input2]
    input3=compoent_list[handle][Register8Bit_Input3]
    input4=compoent_list[handle][Register8Bit_Input4]
    input5=compoent_list[handle][Register8Bit_Input5]
    input6=compoent_list[handle][Register8Bit_Input6]
    input7=compoent_list[handle][Register8Bit_Input7]
    input8=compoent_list[handle][Register8Bit_Input8]
    input9=compoent_list[handle][Register8Bit_Input9]
    input10=compoent_list[handle][Register8Bit_Input10]

    output1=compoent_list[handle][Register8Bit_Output1]
    output2=compoent_list[handle][Register8Bit_Output2]
    output3=compoent_list[handle][Register8Bit_Output3]
    output4=compoent_list[handle][Register8Bit_Output4]
    output5=compoent_list[handle][Register8Bit_Output5]
    output6=compoent_list[handle][Register8Bit_Output6]
    output7=compoent_list[handle][Register8Bit_Output7]
    output8=compoent_list[handle][Register8Bit_Output8]

    points_list[input1][POINT_X] = mousex-4
    points_list[input1][POINT_Y] = mousey+0
    points_list[input2][POINT_X] = mousex-4
    points_list[input2][POINT_Y] = mousey+12
    points_list[input3][POINT_X] = mousex-4
    points_list[input3][POINT_Y] = mousey+24
    points_list[input4][POINT_X] = mousex-4
    points_list[input4][POINT_Y] = mousey+36
    points_list[input5][POINT_X] = mousex-4
    points_list[input5][POINT_Y] = mousey+48
    points_list[input6][POINT_X] = mousex-4
    points_list[input6][POINT_Y] = mousey+60
    points_list[input7][POINT_X] = mousex-4
    points_list[input7][POINT_Y] = mousey+72
    points_list[input8][POINT_X] = mousex-4
    points_list[input8][POINT_Y] = mousey+84
    points_list[input9][POINT_X] = mousex-4
    points_list[input9][POINT_Y] = mousey+96
    points_list[input10][POINT_X] = mousex-4
    points_list[input10][POINT_Y] = mousey+108

    points_list[output1][POINT_X] = mousex+48
    points_list[output1][POINT_Y] = mousey+0
    points_list[output2][POINT_X] = mousex+48
    points_list[output2][POINT_Y] = mousey+12
    points_list[output3][POINT_X] = mousex+48
    points_list[output3][POINT_Y] = mousey+24
    points_list[output4][POINT_X] = mousex+48
    points_list[output4][POINT_Y] = mousey+36
    points_list[output5][POINT_X] = mousex+48
    points_list[output5][POINT_Y] = mousey+48
    points_list[output6][POINT_X] = mousex+48
    points_list[output6][POINT_Y] = mousey+60
    points_list[output7][POINT_X] = mousex+48
    points_list[output7][POINT_Y] = mousey+72
    points_list[output8][POINT_X] = mousex+48
    points_list[output8][POINT_Y] = mousey+84

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][Register8Bit_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+52 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+116 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][Register8Bit_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][Register8Bit_Input1])
          point_delete(compoent_list[handle][Register8Bit_Input2])
          point_delete(compoent_list[handle][Register8Bit_Input3])
          point_delete(compoent_list[handle][Register8Bit_Input4])
          point_delete(compoent_list[handle][Register8Bit_Input5])
          point_delete(compoent_list[handle][Register8Bit_Input6])
          point_delete(compoent_list[handle][Register8Bit_Input7])
          point_delete(compoent_list[handle][Register8Bit_Input8])
          point_delete(compoent_list[handle][Register8Bit_Input9])
          point_delete(compoent_list[handle][Register8Bit_Input10])
          point_delete(compoent_list[handle][Register8Bit_Output1])
          point_delete(compoent_list[handle][Register8Bit_Output2])
          point_delete(compoent_list[handle][Register8Bit_Output3])
          point_delete(compoent_list[handle][Register8Bit_Output4])
          point_delete(compoent_list[handle][Register8Bit_Output5])
          point_delete(compoent_list[handle][Register8Bit_Output6])
          point_delete(compoent_list[handle][Register8Bit_Output7])
          point_delete(compoent_list[handle][Register8Bit_Output8])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( Register8Bit, Mouse_Method, routine_id("mouseRegister8Bit") )


procedure stepRegister8Bit(integer handle)
  integer input1,input2,input3,input4,input5,input6,input7,input8,input9,input10
  integer output1,output2,output3,output4,output5,output6,output7,output8,val,ii
  sequence bits

  input1=compoent_list[handle][Register8Bit_Input1]
  input2=compoent_list[handle][Register8Bit_Input2]
  input3=compoent_list[handle][Register8Bit_Input3]
  input4=compoent_list[handle][Register8Bit_Input4]
  input5=compoent_list[handle][Register8Bit_Input5]
  input6=compoent_list[handle][Register8Bit_Input6]
  input7=compoent_list[handle][Register8Bit_Input7]
  input8=compoent_list[handle][Register8Bit_Input8]
  input9=compoent_list[handle][Register8Bit_Input9]--enable input
  input10=compoent_list[handle][Register8Bit_Input10]--enable output

  output1=compoent_list[handle][Register8Bit_Output1]
  output2=compoent_list[handle][Register8Bit_Output2]
  output3=compoent_list[handle][Register8Bit_Output3]
  output4=compoent_list[handle][Register8Bit_Output4]
  output5=compoent_list[handle][Register8Bit_Output5]
  output6=compoent_list[handle][Register8Bit_Output6]
  output7=compoent_list[handle][Register8Bit_Output7]
  output8=compoent_list[handle][Register8Bit_Output8]

  if points_list[input9][POINT_STATE]=1 then
    val=binary_to_dec({points_list[input8][POINT_STATE],points_list[input7][POINT_STATE],points_list[input6][POINT_STATE],points_list[input5][POINT_STATE],
    points_list[input4][POINT_STATE],points_list[input3][POINT_STATE],points_list[input2][POINT_STATE],points_list[input1][POINT_STATE]})
    compoent_list[handle][Register8Bit_Value]=val
  end if

  	bits=dec_to_binary(compoent_list[handle][Register8Bit_Value])
  	ii=1
    for i=length(bits) to 24 by -1 do
  	  if ii=1 then
  	    if points_list[output1][POINT_STATE]!=bits[i] then
  	  	  send_signal(output1,bits[i])
  	    end if
  	  elsif ii=2 then
  	    if points_list[output2][POINT_STATE]!=bits[i] then
  	  	  send_signal(output2,bits[i])
  	    end if
      elsif ii=3 then
  	    if points_list[output3][POINT_STATE]!=bits[i] then
  	  	  send_signal(output3,bits[i])
  	    end if
	  elsif ii=4 then
  	    if points_list[output4][POINT_STATE]!=bits[i] then
  	  	  send_signal(output4,bits[i])
  	    end if
  	  elsif ii=5 then
  	    if points_list[output5][POINT_STATE]!=bits[i] then
  	  	  send_signal(output5,bits[i])
  	    end if
  	  elsif ii=6 then
  	    if points_list[output6][POINT_STATE]!=bits[i] then
  	  	  send_signal(output6,bits[i])
  	    end if
  	  elsif ii=7 then
  	    if points_list[output7][POINT_STATE]!=bits[i] then
  	  	  send_signal(output7,bits[i])
  	    end if
  	  elsif ii=8 then
  	    if points_list[output8][POINT_STATE]!=bits[i] then
  	  	  send_signal(output8,bits[i])
  	    end if
  	  end if
  	  ii+=1
    end for

end procedure

SetMethod( Register8Bit, Step_Method, routine_id("stepRegister8Bit") )

procedure drawRegister8Bit( integer handle )
  draw_sprite(buffer,ic_bitmaps[7],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( Register8Bit, Draw_Method, routine_id("drawRegister8Bit") )


constant
    Decoder3to8          = createclass( Compoent ),
    Decoder3to8_Input1   = classvaraible(),
    Decoder3to8_Input2   = classvaraible(),
    Decoder3to8_Input3   = classvaraible(),
    Decoder3to8_Output1  = classvaraible(),
    Decoder3to8_Output2  = classvaraible(),
    Decoder3to8_Output3  = classvaraible(),
    Decoder3to8_Output4  = classvaraible(),
    Decoder3to8_Output5  = classvaraible(),
    Decoder3to8_Output6  = classvaraible(),
    Decoder3to8_Output7  = classvaraible(),
    Decoder3to8_Output8  = classvaraible(),
    Decoder3to8_Move     = classvaraible()

procedure initDecoder3to8( integer handle )
  integer x,y,input1,input2,input3,output1,output2,output3,output4,output5,output6,output7,output8

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][TextName]="3 To 8 Decoder"
  compoent_list[handle][Decoder3to8_Input1]  = point_create( x, y+12 )
  compoent_list[handle][Decoder3to8_Input2]  = point_create( x, y+12 )
  compoent_list[handle][Decoder3to8_Input3]  = point_create( x, y+12 )

  compoent_list[handle][Decoder3to8_Output1]  = point_create( x, y+12 )
  compoent_list[handle][Decoder3to8_Output2]  = point_create( x, y+12 )
  compoent_list[handle][Decoder3to8_Output3]  = point_create( x, y+12 )
  compoent_list[handle][Decoder3to8_Output4]  = point_create( x, y+12 )
  compoent_list[handle][Decoder3to8_Output5]  = point_create( x, y+12 )
  compoent_list[handle][Decoder3to8_Output6]  = point_create( x, y+12 )
  compoent_list[handle][Decoder3to8_Output7]  = point_create( x, y+12 )
  compoent_list[handle][Decoder3to8_Output8]  = point_create( x, y+12 )

  compoent_list[handle][Decoder3to8_Move]    = 1

  input1=compoent_list[handle][Decoder3to8_Input1]
  input2=compoent_list[handle][Decoder3to8_Input2]
  input3=compoent_list[handle][Decoder3to8_Input3]

  output1=compoent_list[handle][Decoder3to8_Output1]
  output2=compoent_list[handle][Decoder3to8_Output2]
  output3=compoent_list[handle][Decoder3to8_Output3]
  output4=compoent_list[handle][Decoder3to8_Output4]
  output5=compoent_list[handle][Decoder3to8_Output5]
  output6=compoent_list[handle][Decoder3to8_Output6]
  output7=compoent_list[handle][Decoder3to8_Output7]
  output8=compoent_list[handle][Decoder3to8_Output8]

  points_list[input1][POINT_TYPE]=point_input_type
  points_list[input2][POINT_TYPE]=point_input_type
  points_list[input3][POINT_TYPE]=point_input_type

  points_list[output1][POINT_TYPE]=point_output_type
  points_list[output2][POINT_TYPE]=point_output_type
  points_list[output3][POINT_TYPE]=point_output_type
  points_list[output4][POINT_TYPE]=point_output_type
  points_list[output5][POINT_TYPE]=point_output_type
  points_list[output6][POINT_TYPE]=point_output_type
  points_list[output7][POINT_TYPE]=point_output_type
  points_list[output8][POINT_TYPE]=point_output_type

  points_list[input1][POINT_PARENT_ID]=handle
  points_list[input2][POINT_PARENT_ID]=handle
  points_list[input3][POINT_PARENT_ID]=handle

  points_list[output1][POINT_PARENT_ID]=handle
  points_list[output2][POINT_PARENT_ID]=handle
  points_list[output3][POINT_PARENT_ID]=handle
  points_list[output4][POINT_PARENT_ID]=handle
  points_list[output5][POINT_PARENT_ID]=handle
  points_list[output6][POINT_PARENT_ID]=handle
  points_list[output7][POINT_PARENT_ID]=handle
  points_list[output8][POINT_PARENT_ID]=handle

  setTimer(CWindow1,1001,0)
end procedure

SetMethod( Decoder3to8, Init_Method, routine_id("initDecoder3to8") )

procedure mouseDecoder3to8(integer handle)

  integer input1,input2,input3,output1,output2,output3,output4,output5,output6,output7,output8
  if compoent_list[handle][Decoder3to8_Move]  then

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    input1=compoent_list[handle][Decoder3to8_Input1]
    input2=compoent_list[handle][Decoder3to8_Input2]
    input3=compoent_list[handle][Decoder3to8_Input3]

    output1=compoent_list[handle][Decoder3to8_Output1]
    output2=compoent_list[handle][Decoder3to8_Output2]
    output3=compoent_list[handle][Decoder3to8_Output3]
    output4=compoent_list[handle][Decoder3to8_Output4]
    output5=compoent_list[handle][Decoder3to8_Output5]
    output6=compoent_list[handle][Decoder3to8_Output6]
    output7=compoent_list[handle][Decoder3to8_Output7]
    output8=compoent_list[handle][Decoder3to8_Output8]

    points_list[input1][POINT_X] = mousex-4
    points_list[input1][POINT_Y] = mousey+0
    points_list[input2][POINT_X] = mousex-4
    points_list[input2][POINT_Y] = mousey+12
    points_list[input3][POINT_X] = mousex-4
    points_list[input3][POINT_Y] = mousey+24

    points_list[output1][POINT_X] = mousex+48
    points_list[output1][POINT_Y] = mousey+0
    points_list[output2][POINT_X] = mousex+48
    points_list[output2][POINT_Y] = mousey+12
    points_list[output3][POINT_X] = mousex+48
    points_list[output3][POINT_Y] = mousey+24
    points_list[output4][POINT_X] = mousex+48
    points_list[output4][POINT_Y] = mousey+36
    points_list[output5][POINT_X] = mousex+48
    points_list[output5][POINT_Y] = mousey+48
    points_list[output6][POINT_X] = mousex+48
    points_list[output6][POINT_Y] = mousey+60
    points_list[output7][POINT_X] = mousex+48
    points_list[output7][POINT_Y] = mousey+72
    points_list[output8][POINT_X] = mousex+48
    points_list[output8][POINT_Y] = mousey+84


    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][Decoder3to8_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+52 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+100 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][Decoder3to8_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][Decoder3to8_Input1])
          point_delete(compoent_list[handle][Decoder3to8_Input2])
          point_delete(compoent_list[handle][Decoder3to8_Input3])
          point_delete(compoent_list[handle][Decoder3to8_Output1])
          point_delete(compoent_list[handle][Decoder3to8_Output2])
          point_delete(compoent_list[handle][Decoder3to8_Output3])
          point_delete(compoent_list[handle][Decoder3to8_Output4])
          point_delete(compoent_list[handle][Decoder3to8_Output5])
          point_delete(compoent_list[handle][Decoder3to8_Output6])
          point_delete(compoent_list[handle][Decoder3to8_Output7])
          point_delete(compoent_list[handle][Decoder3to8_Output8])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( Decoder3to8, Mouse_Method, routine_id("mouseDecoder3to8") )


procedure stepDecoder3to8(integer handle)
  integer input1,input2,input3,output1,output2,output3,output4,output5,output6,output7,output8,val

  input1=compoent_list[handle][Decoder3to8_Input1]
  input2=compoent_list[handle][Decoder3to8_Input2]
  input3=compoent_list[handle][Decoder3to8_Input3]

  output1=compoent_list[handle][Decoder3to8_Output1]
  output2=compoent_list[handle][Decoder3to8_Output2]
  output3=compoent_list[handle][Decoder3to8_Output3]
  output4=compoent_list[handle][Decoder3to8_Output4]
  output5=compoent_list[handle][Decoder3to8_Output5]
  output6=compoent_list[handle][Decoder3to8_Output6]
  output7=compoent_list[handle][Decoder3to8_Output7]
  output8=compoent_list[handle][Decoder3to8_Output8]

  val=binary_to_dec({points_list[input3][POINT_STATE],points_list[input2][POINT_STATE],points_list[input1][POINT_STATE]})

  if val!=0 then
  	send_signal(output1,0)
  else
    send_signal(output1,1)
  end if
  if val!=1 then
  	send_signal(output2,0)
  else
    send_signal(output2,1)
  end if
  if val!=2 then
  	send_signal(output3,0)
  else
    send_signal(output3,1)
  end if
  if val!=3 then
  	send_signal(output4,0)
  else
    send_signal(output4,1)
  end if
  if val!=4 then
  	send_signal(output5,0)
  else
    send_signal(output5,1)
  end if
  if val!=5 then
  	send_signal(output6,0)
  else
    send_signal(output6,1)
  end if
  if val!=6 then
  	send_signal(output7,0)
  else
    send_signal(output7,1)
  end if
  if val!=7 then
  	send_signal(output8,0)
  else
    send_signal(output8,1)
  end if


end procedure

SetMethod( Decoder3to8, Step_Method, routine_id("stepDecoder3to8") )



procedure drawDecoder3to8( integer handle )
  draw_sprite(buffer,ic_bitmaps[8],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( Decoder3to8, Draw_Method, routine_id("drawDecoder3to8") )

constant
    PushSwitch         = createclass( Compoent ),
    PushSwitch_Input   = classvaraible(),
    PushSwitch_Output1 = classvaraible(),
    PushSwitch_Move    = classvaraible()

procedure initPushSwitch( integer handle )
  integer x,y,output1

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][PushSwitch_Input] = 0
  compoent_list[handle][PushSwitch_Output1] = point_create( x+16, y+4 )
  compoent_list[handle][PushSwitch_Move]    = 1

  output1=compoent_list[handle][PushSwitch_Output1]

  points_list[output1][POINT_TYPE]=point_output_type

  points_list[output1][POINT_PARENT_ID]=handle


  setTimer(CWindow1,1001,0)
end procedure

SetMethod( PushSwitch, Init_Method, routine_id("initPushSwitch") )

procedure mousePushSwitch(integer handle)

  integer output1,offsetx,offsety
  if compoent_list[handle][PushSwitch_Move]  then
    offsetx=25
    offsety=25

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    output1=compoent_list[handle][PushSwitch_Output1]

    points_list[output1][POINT_X] = mousex+16
    points_list[output1][POINT_Y] = mousey+4

    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][PushSwitch_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+16 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+16 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][PushSwitch_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][PushSwitch_Output1])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      elsif mouse_button=1 and islinking=0 then
      	compoent_list[handle][PushSwitch_Input]=1
      	--setTimer(CWindow1,1001,0)
      elsif mouse_button=3 and islinking=0 then
        compoent_list[handle][PushSwitch_Input]=0
      end if
    else
      compoent_list[handle][PushSwitch_Input]=0
    end if
  end if

end procedure

SetMethod( PushSwitch, Mouse_Method, routine_id("mousePushSwitch") )

procedure stepPushSwitch(integer handle)
  integer input,output1

  input=compoent_list[handle][PushSwitch_Input]
  output1=compoent_list[handle][PushSwitch_Output1]

  if input=1 then
    if points_list[output1][POINT_STATE]=0 then
      send_signal(output1,1)
      points_list[output1][POINT_STATE]=1
    end if
  else
    if points_list[output1][POINT_STATE]=1 then
      send_signal(output1,0)
      points_list[output1][POINT_STATE]=0
    end if
  end if

end procedure

SetMethod( PushSwitch, Step_Method, routine_id("stepPushSwitch") )

procedure drawPushSwitch( integer handle )
  integer output1
  output1=compoent_list[handle][PushSwitch_Output1]

  if points_list[output1][POINT_STATE]=1 then
  	draw_sprite(buffer,pushswitch_bitmaps[2],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
  else
    draw_sprite(buffer,pushswitch_bitmaps[1],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
  end if

end procedure

SetMethod( PushSwitch, Draw_Method, routine_id("drawPushSwitch") )






constant
    BcdTo7SegmentDisplay         = createclass( Compoent ),
    BcdTo7SegmentDisplay_Input1  = classvaraible(),
    BcdTo7SegmentDisplay_Input2  = classvaraible(),
    BcdTo7SegmentDisplay_Input3  = classvaraible(),
    BcdTo7SegmentDisplay_Input4  = classvaraible(),
    BcdTo7SegmentDisplay_Output1 = classvaraible(),
    BcdTo7SegmentDisplay_Output2 = classvaraible(),
    BcdTo7SegmentDisplay_Output3 = classvaraible(),
    BcdTo7SegmentDisplay_Output4 = classvaraible(),
    BcdTo7SegmentDisplay_Output5 = classvaraible(),
    BcdTo7SegmentDisplay_Output6 = classvaraible(),
    BcdTo7SegmentDisplay_Output7 = classvaraible(),
    BcdTo7SegmentDisplay_Move    = classvaraible()

procedure initBcdTo7SegmentDisplay( integer handle )
  integer x,y,input1,input2,input3,input4,output1,output2,output3,output4,output5,output6,output7

  x=compoent_list[handle][XPosition]
  y=compoent_list[handle][YPosition]
  compoent_list[handle][TextName]="Decade Count, Decode and Driver"
  compoent_list[handle][BcdTo7SegmentDisplay_Input1]  = point_create( x, y+12 )
  compoent_list[handle][BcdTo7SegmentDisplay_Input2]  = point_create( x, y+30 )
  compoent_list[handle][BcdTo7SegmentDisplay_Input3]  = point_create( x, y+12 )
  compoent_list[handle][BcdTo7SegmentDisplay_Input4]  = point_create( x, y+30 )

  compoent_list[handle][BcdTo7SegmentDisplay_Output1] = point_create( x+42, y+22 )
  compoent_list[handle][BcdTo7SegmentDisplay_Output2] = point_create( x+42, y+22 )
  compoent_list[handle][BcdTo7SegmentDisplay_Output3] = point_create( x+42, y+22 )
  compoent_list[handle][BcdTo7SegmentDisplay_Output4] = point_create( x+42, y+22 )
  compoent_list[handle][BcdTo7SegmentDisplay_Output5] = point_create( x+42, y+22 )
  compoent_list[handle][BcdTo7SegmentDisplay_Output6] = point_create( x+42, y+22 )
  compoent_list[handle][BcdTo7SegmentDisplay_Output7] = point_create( x+42, y+22 )


  compoent_list[handle][BcdTo7SegmentDisplay_Move]    = 1


  input1=compoent_list[handle][BcdTo7SegmentDisplay_Input1]
  input2=compoent_list[handle][BcdTo7SegmentDisplay_Input2]
  input3=compoent_list[handle][BcdTo7SegmentDisplay_Input3]
  input4=compoent_list[handle][BcdTo7SegmentDisplay_Input4]
  output1=compoent_list[handle][BcdTo7SegmentDisplay_Output1]
  output2=compoent_list[handle][BcdTo7SegmentDisplay_Output2]
  output3=compoent_list[handle][BcdTo7SegmentDisplay_Output3]
  output4=compoent_list[handle][BcdTo7SegmentDisplay_Output4]
  output5=compoent_list[handle][BcdTo7SegmentDisplay_Output5]
  output6=compoent_list[handle][BcdTo7SegmentDisplay_Output6]
  output7=compoent_list[handle][BcdTo7SegmentDisplay_Output7]


  points_list[input1][POINT_TYPE]=point_input_type
  points_list[input2][POINT_TYPE]=point_input_type
  points_list[input3][POINT_TYPE]=point_input_type
  points_list[input4][POINT_TYPE]=point_input_type

  points_list[output1][POINT_TYPE]=point_output_type
  points_list[output2][POINT_TYPE]=point_output_type
  points_list[output3][POINT_TYPE]=point_output_type
  points_list[output4][POINT_TYPE]=point_output_type
  points_list[output5][POINT_TYPE]=point_output_type
  points_list[output6][POINT_TYPE]=point_output_type
  points_list[output7][POINT_TYPE]=point_output_type


  points_list[input1][POINT_PARENT_ID]=handle
  points_list[input2][POINT_PARENT_ID]=handle
  points_list[input3][POINT_PARENT_ID]=handle
  points_list[input4][POINT_PARENT_ID]=handle

  points_list[output1][POINT_PARENT_ID]=handle
  points_list[output2][POINT_PARENT_ID]=handle
  points_list[output3][POINT_PARENT_ID]=handle
  points_list[output4][POINT_PARENT_ID]=handle
  points_list[output5][POINT_PARENT_ID]=handle
  points_list[output6][POINT_PARENT_ID]=handle
  points_list[output7][POINT_PARENT_ID]=handle

  setTimer(CWindow1,1001,0)
end procedure

SetMethod( BcdTo7SegmentDisplay, Init_Method, routine_id("initBcdTo7SegmentDisplay") )

procedure mouseBcdTo7SegmentDisplay(integer handle)

  integer input1,input2,input3,input4,output1,output2,output3,output4,output5,output6,output7,offsetx,offsety

  if compoent_list[handle][BcdTo7SegmentDisplay_Move]  then
    offsetx=25
    offsety=25

    if grid_enable then
      tx=mousex
      ty=mousey
      for i=0 to workspace_width by gridx do
        if mousex>=i and mousex<=i+gridx then
          mousex=i
      	  exit
        end if
      end for
      for i=0 to workspace_width by gridy do
        if mousey>=i and mousey<=i+gridy then
          mousey=i
      	  exit
        end if
      end for	
    end if

  	compoent_list[handle][XPosition]=mousex
    compoent_list[handle][YPosition]=mousey

    input1=compoent_list[handle][BcdTo7SegmentDisplay_Input1]
    input2=compoent_list[handle][BcdTo7SegmentDisplay_Input2]
    input3=compoent_list[handle][BcdTo7SegmentDisplay_Input3]
    input4=compoent_list[handle][BcdTo7SegmentDisplay_Input4]

    output1=compoent_list[handle][BcdTo7SegmentDisplay_Output1]
    output2=compoent_list[handle][BcdTo7SegmentDisplay_Output2]
    output3=compoent_list[handle][BcdTo7SegmentDisplay_Output3]
    output4=compoent_list[handle][BcdTo7SegmentDisplay_Output4]
    output5=compoent_list[handle][BcdTo7SegmentDisplay_Output5]
    output6=compoent_list[handle][BcdTo7SegmentDisplay_Output6]
    output7=compoent_list[handle][BcdTo7SegmentDisplay_Output7]


    points_list[input1][POINT_X] = mousex-4
    points_list[input1][POINT_Y] = mousey+6
    points_list[input2][POINT_X] = mousex-4
    points_list[input2][POINT_Y] = mousey+16
    points_list[input3][POINT_X] = mousex-4
    points_list[input3][POINT_Y] = mousey+26
    points_list[input4][POINT_X] = mousex-4
    points_list[input4][POINT_Y] = mousey+36

    points_list[output1][POINT_X] = mousex+48
    points_list[output1][POINT_Y] = mousey+6
    points_list[output2][POINT_X] = mousex+48
    points_list[output2][POINT_Y] = mousey+16
    points_list[output3][POINT_X] = mousex+48
    points_list[output3][POINT_Y] = mousey+26
    points_list[output4][POINT_X] = mousex+48
    points_list[output4][POINT_Y] = mousey+36
    points_list[output5][POINT_X] = mousex+48
    points_list[output5][POINT_Y] = mousey+46
    points_list[output6][POINT_X] = mousex+48
    points_list[output6][POINT_Y] = mousey+56
    points_list[output7][POINT_X] = mousex+48
    points_list[output7][POINT_Y] = mousey+66


    if grid_enable then
      mousex=tx
      mousey=ty
    end if

    if mouse_button=1 then
      compoent_list[handle][BcdTo7SegmentDisplay_Move]=0	
    end if

    setTimer(CWindow1,1001,0)
  else
    if mousex>=compoent_list[handle][XPosition] and mousex<=compoent_list[handle][XPosition]+52 and
       mousey>=compoent_list[handle][YPosition] and mousey<=compoent_list[handle][YPosition]+116 then
      if mouse_button=2 and islinking=0 and running=0 then
        compoent_popup_handle=handle
        compoent_popup_command=0
        popup( {Popup_101,CWindow1}, mouse_x, mouse_y )
        doEvents(0)
        if compoent_popup_command=1 then
          compoent_list[handle][BcdTo7SegmentDisplay_Move]=1
          mouse_event_exit=1
        elsif compoent_popup_command=2 then
          point_delete(compoent_list[handle][BcdTo7SegmentDisplay_Input1])
          point_delete(compoent_list[handle][BcdTo7SegmentDisplay_Input2])
          point_delete(compoent_list[handle][BcdTo7SegmentDisplay_Input3])
          point_delete(compoent_list[handle][BcdTo7SegmentDisplay_Input4])
          point_delete(compoent_list[handle][BcdTo7SegmentDisplay_Output1])
          point_delete(compoent_list[handle][BcdTo7SegmentDisplay_Output2])
          point_delete(compoent_list[handle][BcdTo7SegmentDisplay_Output3])
          point_delete(compoent_list[handle][BcdTo7SegmentDisplay_Output4])
          point_delete(compoent_list[handle][BcdTo7SegmentDisplay_Output5])
          point_delete(compoent_list[handle][BcdTo7SegmentDisplay_Output6])
          point_delete(compoent_list[handle][BcdTo7SegmentDisplay_Output7])
          compoent_list[handle]={}
          setTimer(CWindow1,1001,0)
          mouse_event_exit=1
        end if
      end if
    end if
  end if

end procedure

SetMethod( BcdTo7SegmentDisplay, Mouse_Method, routine_id("mouseBcdTo7SegmentDisplay") )

procedure stepBcdTo7SegmentDisplay(integer handle)
  integer input1,input2,input3,input4,output1,output2,output3,output4,output5,output6,output7,count

  input1=compoent_list[handle][BcdTo7SegmentDisplay_Input1] --binary 1
  input2=compoent_list[handle][BcdTo7SegmentDisplay_Input2] --binary 2
  input3=compoent_list[handle][BcdTo7SegmentDisplay_Input3] --binary 3
  input4=compoent_list[handle][BcdTo7SegmentDisplay_Input4] --binary 4
  output1=compoent_list[handle][BcdTo7SegmentDisplay_Output1] --a
  output2=compoent_list[handle][BcdTo7SegmentDisplay_Output2] --b
  output3=compoent_list[handle][BcdTo7SegmentDisplay_Output3] --c
  output4=compoent_list[handle][BcdTo7SegmentDisplay_Output4] --d
  output5=compoent_list[handle][BcdTo7SegmentDisplay_Output5] --e
  output6=compoent_list[handle][BcdTo7SegmentDisplay_Output6] --f
  output7=compoent_list[handle][BcdTo7SegmentDisplay_Output7] --g


  count=binary_to_dec({points_list[input4][POINT_STATE],points_list[input3][POINT_STATE],points_list[input2][POINT_STATE],points_list[input1][POINT_STATE]})

      if count=0 then
        send_signal(output1,1)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,1)--d
	  	send_signal(output5,1)--e
	  	send_signal(output6,1)--f
	  	send_signal(output7,0)--g
      elsif count=1 then
	    send_signal(output1,0)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,0)--d
	  	send_signal(output5,0)--e
	  	send_signal(output6,0)--f
	  	send_signal(output7,0)--g
	  elsif count=2 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,0)--c
	  	send_signal(output4,1)--d
	  	send_signal(output5,1)--e
	  	send_signal(output6,0)--f
	  	send_signal(output7,1)--g
	  elsif count=3 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,1)--d
	  	send_signal(output5,0)--e
	  	send_signal(output6,0)--f
	  	send_signal(output7,1)--g
	  elsif count=4 then
	  	send_signal(output1,0)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,0)--d
	  	send_signal(output5,0)--e
	  	send_signal(output6,1)--f
	  	send_signal(output7,1)--g
	  elsif count=5 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,0)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,1)--d
	  	send_signal(output5,0)--e
	  	send_signal(output6,1)--f
	  	send_signal(output7,1)--g
	  elsif count=6 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,0)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,1)--d
	  	send_signal(output5,1)--e
	  	send_signal(output6,1)--f
	  	send_signal(output7,1)--g
	  elsif count=7 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,0)--d
	  	send_signal(output5,0)--e
	  	send_signal(output6,0)--f
	  	send_signal(output7,0)--g
	  elsif count=8 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,1)--d
	  	send_signal(output5,1)--e
	  	send_signal(output6,1)--f
	  	send_signal(output7,1)--g
	  elsif count=9 then
	  	send_signal(output1,1)--a
	  	send_signal(output2,1)--b
	  	send_signal(output3,1)--c
	  	send_signal(output4,1)--d
	  	send_signal(output5,0)--e
	  	send_signal(output6,1)--f
	  	send_signal(output7,1)--g
	  end if



end procedure

SetMethod( BcdTo7SegmentDisplay, Step_Method, routine_id("stepBcdTo7SegmentDisplay") )



procedure drawBcdTo7SegmentDisplay( integer handle )
  draw_sprite(buffer,ic_bitmaps[9],compoent_list[handle][XPosition]-view_left,compoent_list[handle][YPosition]-view_top)
end procedure

SetMethod( BcdTo7SegmentDisplay, Draw_Method, routine_id("drawBcdTo7SegmentDisplay") )









--=============================== events
procedure mouse_all_compoent()
  integer routineId,class
	for i=1 to length(compoent_list) do
		if length(compoent_list[i]) then
		  class=compoent_list[i][Class]
		  routineId = classes[class][Method][Mouse_Method]	
		  if routineId !=-1 then
		  	call_proc(routineId,{i})
		  end if
		  if mouse_event_exit then
		  	exit
		  end if
		end if
	end for
	mouse_event_exit=0
end procedure


procedure gpu_reset_bitmap()
  integer routineId,class
	for i=1 to length(compoent_list) do
		if length(compoent_list[i]) then
		  class=compoent_list[i][Class]
		  if class=GPU then
		     compoent_list[i][GPU_Bitmap]  = create_bitmap(128,128)
		  end if
		end if
	end for
end procedure

procedure init_all_compoent()
  integer routineId,class
	for i=1 to length(compoent_list) do
		if length(compoent_list[i]) then
		  class=compoent_list[i][Class]
		  --if class=OnOffSwitch or class=Clock or class=NotGate or class=NorGate then
		  	routineId = classes[class][Method][Step_Method]	
		    if routineId !=-1 then
		  	  call_proc(routineId,{i})
		    end if
		  --end if
		end if
	end for
end procedure

procedure step_all_compoent()
  integer routineId,class
	for i=1 to length(compoent_list) do
		if length(compoent_list[i]) then
		  class=compoent_list[i][Class]
		  if class=OnOffSwitch or class=PushSwitch or class=NotGate or class=Clock or class=BitKeyPad then
		  	routineId = classes[class][Method][Step_Method]	
		    if routineId !=-1 then
		  	  call_proc(routineId,{i})
		    end if
		  end if
		end if
	end for
end procedure

procedure draw_all_compoent()
  integer routineId,class
	for i=1 to length(compoent_list) do
		if length(compoent_list[i]) then
		  class=compoent_list[i][Class]
		  routineId = classes[class][Method][Draw_Method]	
		  if routineId !=-1 then
		  	call_proc(routineId,{i})
		  end if
		end if
	end for
end procedure

--=============================end compoent setup============================--





atom timer,timer2,timer3
atom fps1,fps2,simulator_delay
timer=0
timer2=0
timer3=0
fps1=0
fps2=0
simulator_delay=0

function findinlist(sequence list, integer handle)
	for i=1 to length(list) do
		if list[i]=handle then
			return 1
		end if
	end for
	return 0
end function

procedure intnorgate()
   integer output1,other_output,compoent_handle
   sequence donelist
   donelist={}

   for i=1 to length(compoent_list) do
   	 if length(compoent_list[i])!=0 and findinlist(donelist,i)=0 then
   	 	if compoent_list[i][Class]=NorGate then
   	 	  output1=compoent_list[i][AndGate_Output1]	
   	 	  for j=1 to length(points_list[output1][POINT_LINKLIST]) do
   	 	    other_output=points_list[output1][POINT_LINKLIST][j]
   	 	  	if other_output!=empty_handle then
   	 	  	  if points_list[other_output][POINT_TYPE]=point_input_type then
   	 	  	  	compoent_handle=points_list[other_output][POINT_PARENT_ID]
   	 	  	    if compoent_list[compoent_handle][Class]=NorGate then
   	 	  	      send_signal(output1,1)
   	 	  	      points_list[other_output][POINT_STATE]=1
   	 	  	      donelist&=compoent_handle
   	 	  	  	  exit
   	 	  	    end if
   	 	  	  end if
   	 	  	end if
   	 	  end for
   	 	end if
   	 end if
   end for
	
end procedure

procedure sendoutputstates()
  for i=1 to length(points_list) do
    if length(points_list[i]) then
  	  if points_list[i][POINT_TYPE]=point_output_type then
  	    push_signal_list({i,points_list[i][POINT_STATE]})
      end if
  	end if
  end for
end procedure


procedure intjkflipflop()
   integer output1,output2

   for i=1 to length(compoent_list) do
   	 if length(compoent_list[i])!=0 then
   	 	if compoent_list[i][Class]=JKflipflop then
   	 	  output1=compoent_list[i][JKflipflop_Output1]
   	 	  output2=compoent_list[i][JKflipflop_Output2]
   	 	  if points_list[output1][POINT_STATE]=0 and points_list[output2][POINT_STATE]=0 then
   	 	  	send_signal(output2,1)
   	 	  end if
   	 	end if
   	 end if
   end for
	
end procedure

sequence com_list_info
com_list_info={
{"AND gate",0},
{"NAND gate",0},
{"NOT gate",0},
{"OR gate",0},
{"NOR gate",0},
{"XOR gate",0},
{"XNOR gate",0},
{"ON OFF SWITCH",0},
{"CLOCK",0},
{"SEVGEN SEGMENT DISPLAY",0},
{"DECADE COUNTER DECODER DRIVER",0},
{"GPU",0},
{"JK FLIP FLOP",0},
{"BINARY DISPLAY",0},
{"BINARY KEYPAD",0},
{"FULL ADDER",0},
{"TEXT LABEL",0},
{"LED RED",0},
{"8 BIT REGISTER",0},
{"3 TO 8 DECODER",0},
{"Total Components",0},
{"Total Pins",0},
{"Total Components+Pins",0},
{"Wires",0}
}

procedure getnumberofcom()
   integer total_com,total_pin
   atom wires
   sequence links
   total_com=0
   total_pin=0
   wires=0

   for i=1 to length(com_list_info) do
   	 com_list_info[i][2]=0
   end for

   for i=1 to length(points_list) do
     if length(points_list[i]) then
  	   total_pin+=1
  	 end if
   end for

   for i=1 to length(compoent_list) do
   	 if length(compoent_list[i]) then
   	    total_com+=1
   	 	if compoent_list[i][Class]=AndGate then
   	 	  com_list_info[1][2]+=1
   	 	elsif compoent_list[i][Class]=NandGate then
   	 	  com_list_info[2][2]+=1
   	 	elsif compoent_list[i][Class]=NotGate then
   	 	  com_list_info[3][2]+=1
   	 	elsif compoent_list[i][Class]=OrGate then
   	 	  com_list_info[4][2]+=1
   	 	elsif compoent_list[i][Class]=NorGate then
   	 	  com_list_info[5][2]+=1
   	 	elsif compoent_list[i][Class]=XorGate then
   	 	  com_list_info[6][2]+=1
   	 	elsif compoent_list[i][Class]=XnorGate then
   	 	  com_list_info[7][2]+=1
   	 	elsif compoent_list[i][Class]=OnOffSwitch then
   	 	  com_list_info[8][2]+=1
   	 	elsif compoent_list[i][Class]=Clock then
   	 	  com_list_info[9][2]+=1
   	 	elsif compoent_list[i][Class]=SevenSegmentDisplay then
   	 	  com_list_info[10][2]+=1
   	 	elsif compoent_list[i][Class]=DecadeCounterDecoderDriver then
   	 	  com_list_info[11][2]+=1
   	 	elsif compoent_list[i][Class]=GPU then
   	 	  com_list_info[12][2]+=1
   	 	elsif compoent_list[i][Class]=JKflipflop then
   	 	  com_list_info[13][2]+=1
   	 	elsif compoent_list[i][Class]=BitDisplay then
   	 	  com_list_info[14][2]+=1
   	 	elsif compoent_list[i][Class]=BitKeyPad then
   	 	  com_list_info[15][2]+=1
   	 	elsif compoent_list[i][Class]=FullAdder then
   	 	  com_list_info[16][2]+=1
   	 	elsif compoent_list[i][Class]=TextLable then
   	 	  com_list_info[17][2]+=1
   	 	elsif compoent_list[i][Class]=LedRed then
   	 	  com_list_info[18][2]+=1
   	 	elsif compoent_list[i][Class]=Register8Bit then
   	 	  com_list_info[19][2]+=1
   	 	elsif compoent_list[i][Class]=Decoder3to8 then
   	 	  com_list_info[20][2]+=1
   	 	end if
   	 end if
   end for
   com_list_info[21][2]=total_com
   com_list_info[22][2]=total_pin
   com_list_info[23][2]=total_com+total_pin

   for i=1 to length(points_list) do
     if length(points_list[i]) then
       links=points_list[i][POINT_LINKLIST]  	
       for j=1 to length(links) do
         if links[j]!=empty_handle then
           wires+=1
         end if
       end for
     end if
   end for
   if wires!=0 then
   	wires=floor(wires/2)
   end if
   com_list_info[24][2]=wires
end procedure


procedure run()
sequence data,next_signal_list,compoent_step, pre_links
integer point_handle,state,found,compoent_handle
integer routineId,class
atom ttt
next_signal_list={}


intnorgate()
init_all_compoent()
sendoutputstates()
intjkflipflop()

setText( {StatusBar1,2}, "Running")

while running=1 do
	ttt=time()

	

    if timer2<ttt then
      timer2=ttt+0.03
      setTimer(CWindow1,1001,0)	
    end if
    doEvents(0)


if timer3<ttt then  --simulator time control

if simulator_delay!=0 then
  timer3=ttt+simulator_delay	
end if


step_all_compoent()


    fps1+=1
    if timer<ttt then
      timer=ttt+1
      fps2=fps1
      fps1=0
      --?fps2
      setText( {StatusBar1,2}, "Running Fps: "&sprint(fps2))
    end if



while 1 do


pre_links=repeat(-1,length(points_list))
compoent_step=repeat(-1,length(compoent_list))

  if size_signal_list() >0 then
    while size_signal_list() >0 do

      data=pop_signal_list()
      point_handle=data[1]
      state=data[2]

      pre_links[point_handle]=1

      points_list[point_handle][POINT_STATE]=state


      class=compoent_list[points_list[point_handle][POINT_PARENT_ID]][Class]

      if points_list[point_handle][POINT_TYPE]=point_input_type and class!=NotGate and points_list[point_handle][POINT_COUNTER]=0 then
        if compoent_step[points_list[point_handle][POINT_PARENT_ID]]=-1 then
          push_compoent_execute_list(points_list[point_handle][POINT_PARENT_ID])
          compoent_step[points_list[point_handle][POINT_PARENT_ID]]=1
        end if
      end if

      points_list[point_handle][POINT_COUNTER]+=1

      for i=1 to length(points_list[point_handle][POINT_LINKLIST]) do
        if points_list[point_handle][POINT_LINKLIST][i]!=empty_handle then
   	
          if pre_links[ points_list[point_handle][POINT_LINKLIST][i] ] =-1 then
            -- disable output to output
            -- disable input to output
            if points_list[point_handle][POINT_TYPE]=point_output_type and points_list[ points_list[point_handle][POINT_LINKLIST][i] ][POINT_TYPE]=point_output_type then

            elsif points_list[point_handle][POINT_TYPE]=point_input_type and points_list[ points_list[point_handle][POINT_LINKLIST][i] ][POINT_TYPE]=point_output_type then
            		
            else
              -- enable input to input
              -- enable output to input
              if points_list[ points_list[point_handle][POINT_LINKLIST][i] ][POINT_COUNTER]=0 then
                push_signal_list({points_list[point_handle][POINT_LINKLIST][i],state})
          	    pre_links[ points_list[point_handle][POINT_LINKLIST][i] ]=1
          	  else
          	    next_signal_list=append(next_signal_list,{points_list[point_handle][POINT_LINKLIST][i],state})
              end if

            end if

          end if

      	end if
      end for

    end while
  else
    if size_compoent_execute_list() >0 then

      while size_compoent_execute_list() >0 do

        compoent_handle=pop_compoent_execute_list()
        class=compoent_list[compoent_handle][Class]
		routineId = classes[class][Method][Step_Method]	
		if routineId !=-1 then
		  call_proc(routineId,{compoent_handle})
		end if
		
      end while
    else

      exit

    end if
  end if

end while

points_reset_counter()
point_signal_list=next_signal_list
next_signal_list={}

end if --simulator time control

end while

setText( {StatusBar1,2}, "Not Running")
setTimer(CWindow1,1001,0)	

end procedure




procedure draw_linking_line()
integer mousex,mousey,startx,starty

mousex=mouse_x
mousey=mouse_y
startx=start_x-view_left
starty=start_y-view_top

if islinking=1 then
  allegro:line(buffer,startx,starty,mousex,mousey,color_black)
end if

end procedure


procedure mouse_function(integer event, integer x, integer y)
  integer index

  if event=LeftDown and islinking=0 and running=0 then
    point_handle=point_mouse_over(x,y)
  	if point_handle then
      start_x=points_list[point_handle][POINT_X]+point_halfw
      start_y=points_list[point_handle][POINT_Y]+point_halfh
      points_set_selected(point_handle,1)
  	  islinking=1
  	  setTimer(CWindow1,1001,0)
  	  return
  	end if
  end if

  if event=LeftDown and islinking=1 then
    index=point_mouse_over(x,y)
  	if index then
  	  if point_handle=index then-- cant link to the same point
  	    islinking=0
  	    setTimer(CWindow1,1001,0)
  	    return
  	  end if
  	
  	  if points_are_linked(point_handle,index)=0 then
  	    points_connect(point_handle,index)
      end if

      points_set_selected(index,1)

  	  islinking=0
  	  setTimer(CWindow1,1001,0)
  	  return --exit procedure
  	end if
  	
  	return --exit procedure
  end if

  if event=RightDown and islinking=1 then
  	islinking=0
  	setTimer(CWindow1,1001,0)
  	return --exit procedure
  end if

  if islinking=1 then
  	setTimer(CWindow1,1001,0)
  end if
	
end procedure


--==============================CWindow1 events==============================--
procedure cwindow1_paint()
  atom hdc

if draw_ponents=1 then
  hdc=getDC(CWindow1)
  clear_to_color(buffer,color_background)

  --allegro:line(buffer,-view_left,-view_top,workspace_width-view_left,workspace_height-view_top,color_black)
  --allegro:rect(buffer,0-view_left,0-view_top,639-view_left,479-view_top,color_red)
  --allegro:textout_ex(buffer,font, sprint(view_top)&" "&sprint(window_height)&" "&sprint(view_top+window_height) ,100-view_left , 100-view_top , makecol(255,0,0),-1 )
  --allegro:textout_ex(buffer,font, sprint(view_left)&" "&sprint(view_top), 0 , 0 , makecol(255,0,0),-1 )
  --allegro:textout_ex(buffer,font, sprint(view_top)&" "&sprint(window_height)&" "&sprint(view_top+window_height) ,100 , 100 , makecol(255,0,0),-1 )

  if grid_enable and grid_draw then
    for i=0 to workspace_width by gridx do
  	  allegro:line(buffer,i-view_left,-view_top,i-view_left,window_height,color_black)
    end for
    for i=0 to workspace_height by gridy do
  	  allegro:line(buffer,-view_left,i-view_top,window_width,i-view_top,color_black)
    end for
  end if

  if draw_ponents=1 then
  	draw_all_compoent()
  	points_draw()
  end if


  draw_linking_line()

  blit_to_hdc(buffer,hdc,0,0,0,0,window_width,window_height)
  releaseDC(hdc)
else
  if draw_lines=1 then
  	points_draw()
  end if
end if
end procedure

procedure cwindow1_scroll()
  view_left=getScrollPos( {CWindow1, SB_HORZ} )
  view_top=getScrollPos( {CWindow1, SB_VERT} )
end procedure


procedure cwindow1_resize()
sequence size
 size=getCtlSize( Window1 )

 --view width\height
 window_width=size[1]-(window_hscrollbar_width*2)
 window_height=size[2]-(window_titlebar_height+window_menu_height+(window_vscrollbar_height*2)+20)
 destroy_bitmap(buffer)

 buffer=0--might catch a bug
 if window_width>workspace_width then
 	window_width=workspace_width
 end if
 if window_height>workspace_height then
 	window_height=workspace_height
 end if
 if window_width<1 then
 	window_width=1
 end if
 if window_height<1 then
 	window_height=1
 end if

 buffer=create_bitmap(window_width,window_height)
 --cwindow2 scroll bars
 if view_left+window_width>workspace_width then	
 	setScrollPos( {CWindow1, SB_HORZ}, (view_left-(view_left+window_width-workspace_width)) )
 end if
 if view_top+window_height>workspace_height then
 	setScrollPos( {CWindow1, SB_VERT}, (view_top-(view_top+window_height-workspace_height)) )
 end if

 setWindowScrollRange ( CWindow1, SB_HORZ, 0,  (workspace_width-window_width), 1)
 setWindowScrollRange ( CWindow1, SB_VERT, 0,  (workspace_height-window_height), 1)

 if (workspace_width-window_width)<=1 then
 	--setWindowScrollRange2 ( CWindow1, SB_HORZ, 0, 0, 1)
 else
   --setWindowScrollRange2 ( CWindow1, SB_HORZ, 0, 10, 1)
   setWindowScrollRange ( CWindow1, SB_HORZ, 0,  (workspace_width-window_width), 1)
 end if
 if (workspace_height-window_height)<=1 then
 	--setWindowScrollRange2 ( CWindow1, SB_VERT, 0, 0, 1)
 else
   --setWindowScrollRange2 ( CWindow1, SB_VERT, 0, 10, 1)
   setWindowScrollRange ( CWindow1, SB_VERT, 0,  (workspace_height-window_height), 1)
 end if
end procedure

procedure cwindow1_mouse(integer event, integer x,integer y)

  mouse_x=x
  mouse_y=y
  mousex=x+view_left
  mousey=y+view_top
  mouse_function(event, x,  y)
if event=MouseMove then
else
  if event=LeftDown then
     mouse_button=1
  elsif event=LeftDown+MouseMove then
     mouse_button=1
  elsif event=LeftUp then
     mouse_button=3
  elsif event=LeftUp+MouseMove then
     mouse_button=3
  elsif event=RightDown then
     mouse_button=2
  elsif event=RightDown+MouseMove then
     mouse_button=2
  elsif event=RightUp then
     mouse_button=4
  elsif event=RightUp+MouseMove then
     mouse_button=4
  else
    mouse_button=0
  end if
end if

  mouse_all_compoent()

  mouse_button=0
end procedure
--===========================End CWindow1 events==============================--



procedure check_open()
sequence arg,fname

  arg=command_line()
  fname=""
  if length(arg)>2 then -- drag on to game maker exe file
    fname=arg[3]
    if length(arg)>3 then-- shell mouse click on game file
      fname=""
      for i=3 to length(arg) do
         if i!=length(arg) then
           fname&=arg[i]&" "
         else
           fname&=arg[i]
         end if
      end for
    end if
  end if

  if length(fname) then
	if db_open(fname, DB_LOCK_NO) != DB_OK then

    end if

    if db_select_table("data") != DB_OK then
	  --myfatal("couldn't select table\n")
    end if
    points_list=db_record_data( db_find_key("points_list") )
    points_free_list=db_record_data( db_find_key("points_free_list") )
    compoent_list=db_record_data( db_find_key("compoent_list") )
    gpu_reset_bitmap()
    init_all_compoent()
    db_close()
    setText(Window1,ProgramName&" - "&get_file_name_part(fname))
    setTimer(CWindow1,1001,0)
  end if
end procedure


procedure create_com()
integer x,y,ww

  x=40
  y=40
  ww=60

  point_signal_list={}
  points_list={}
  points_free_list={}
  compoent_execute_list={}
  compoent_list={}

  for i=COMPONENT_NUMOFBITS to 1 by -1 do
  	if component_bits[i]!=0 then
  	  component_pos2=i	
  	end if
  end for

  for i=COMPONENT_NUMOFBITS to component_pos2 by -1 do
  	if component_bits[i]=1 then
  	  ret=compoent_create( AndGate, x, y )
  	  x+=ww
  	elsif component_bits[i]=2 then
  	  ret=compoent_create( NandGate, x, y )
  	  x+=ww
  	elsif component_bits[i]=3 then
  	  ret=compoent_create( NotGate, x, y )
  	  x+=ww
  	elsif component_bits[i]=4 then
  	  ret=compoent_create( OrGate, x, y )
  	  x+=ww	
  	elsif component_bits[i]=5 then
  	  ret=compoent_create( NorGate, x, y )
  	  x+=ww
  	elsif component_bits[i]=6 then
  	  ret=compoent_create( XorGate, x, y )
  	  x+=ww
  	elsif component_bits[i]=7 then
  	  ret=compoent_create( XnorGate, x, y )
  	  x+=ww	
  	end if
  end for

  if equal(component_bits,component_result) then
   component_pos2=COMPONENT_NUMOFBITS
   component_bits=repeat(COMPONENT_START,COMPONENT_NUMOFBITS)
   component_pos1=COMPONENT_NUMOFBITS
  end if

  component_bits[component_pos1]+=1

  if component_bits[component_pos1]>COMPONENT_TARGET then
    component_bits[component_pos1]=COMPONENT_START+1
    component_pos1-=1


    for i=component_pos1 to 1 by -1 do
      component_bits[i]+=1
      if component_bits[i]>COMPONENT_TARGET then
        component_bits[i]=COMPONENT_START+1
      else
        component_pos1=COMPONENT_NUMOFBITS
        exit
      end if
    end for

  end if

  setTimer(CWindow1,1001,0)
end procedure


constant WIRE_START=0
constant WIRE_TARGET=1

integer WIRE_NUMOFBITS
sequence wire_bits
integer wire_pos1
sequence wire_result
integer wire_int
sequence wire_type_list

wire_type_list={}
wire_int=0

procedure wire_reset(integer size)
  WIRE_NUMOFBITS=size
  wire_bits=repeat(0,WIRE_NUMOFBITS)
  wire_pos1=WIRE_NUMOFBITS
  wire_result=repeat(WIRE_TARGET,WIRE_NUMOFBITS)
end procedure


procedure wire_create()

  if wire_int=0 then
    wire_type_list=point_get_list_oftypes()
    wire_reset(length(wire_type_list[1])*length(wire_type_list[2]))
  	wire_int=1
  end if

  for i=1 to length(wire_type_list[2]) do
  	points_delete_all_connections(wire_type_list[2][i])
  end for

  for i=length(wire_type_list[2]) to 1 by -1 do --outputs
    for j=1 to length(wire_type_list[1])-1 do --inputs
      if wire_bits[(length(wire_type_list[1])*i)-j]=1 then
      	points_connect(wire_type_list[2][i],wire_type_list[1][j])
      end if	
    end for

  end for

  --?wire_bits
	
  --if equal(wire_bits,wire_result) then
  --  exit
  --end if



  setTimer(CWindow1,1001,0)
end procedure
#EndProc

#Proc: onClose
procedure Window1_onClose (integer self, integer event, sequence params)--params is ()
integer ret

ret = message_box("Do you wish to exit?","Game Creator",MB_YESNO)

if ret=IDNO then
  returnValue(1)
  return
end if

  save_config()
  close_allegro()
  abort(0)
end procedure
setHandler( Window1, w32HClose, routine_id("Window1_onClose"))
#EndProc

#Proc: onKeyDown
procedure Window1_onKeyDown (integer self, integer event, sequence params)--params is ( atom scanCode, atom shift )
  key_add(params[1])
  point_selected_keypress_event(params[1])

  if params[1]=VK_ENTER then
    points_reset_counter()
    point_signal_list={}
    simulator_delay=0
    running=not(running)
  	run()
  	
  	create_com()
  	wire_create()
  end if

  if params[1]=VK_SPACE then
    points_reset_counter()
    point_signal_list={}
    simulator_delay=1
    running=not(running)
  	run()
  end if

  if params[1]=68 then--d
    draw_ponents=not(draw_ponents)
    setTimer(CWindow1,1001,0)
  end if

  if params[1]=87 then--w
    draw_lines=not(draw_lines)
    setTimer(CWindow1,1001,0)
  end if


end procedure
setHandler( Window1, w32HKeyDown, routine_id("Window1_onKeyDown"))
#EndProc

#Proc: onKeyUp
procedure Window1_onKeyUp (integer self, integer event, sequence params)--params is ( int scanCode, int shift )
  key_remove(params[1])
end procedure
setHandler( Window1, w32HKeyUp, routine_id("Window1_onKeyUp"))
#EndProc

#Proc: onOpen
procedure Window1_onOpen (integer self, integer event, sequence params)--params is ()
  startup_allegro()
  --centerwindow(Window1)
  setCtlPosition(CWindow1,0,0)
  setEnable(PopupItem_104,0)
  check_open()
end procedure
setHandler( Window1, w32HOpen, routine_id("Window1_onOpen"))
#EndProc

#Proc: onResize
procedure Window1_onResize (integer self, integer event, sequence params)--params is ( int style, int cx, int cy )
sequence size
  size=getCtlSize(Window1)
  setCtlSize(CWindow1,size[1]-window_hscrollbar_width,size[2]-(window_titlebar_height+window_menu_height+window_vscrollbar_height+20))
end procedure
setHandler( Window1, w32HResize, routine_id("Window1_onResize"))
#EndProc

#Proc: onTimer
procedure Window1_onTimer (integer self, integer event, sequence params)--params is ( int timerId)
  if params[1]=1001 then
  	showWindow(Window1,SW_SHOWMAXIMIZED)
    killTimer(Window1,1001)
  end if
end procedure
setHandler( Window1, w32HTimer, routine_id("Window1_onTimer"))
#EndProc

#Control: Menu_101
AWindow : 1
X       : 0
Y       : 1
CX      : 0
CY      : 0
ControlLayer: 0
Title   : File
Class   : Menu
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1

#Control: MenuItem_102
AWindow : 1
X       : 0
Y       : 2
CX      : 0
CY      : 0
ControlLayer: 0
Title   : New
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_102_onClick (integer self, integer event, sequence params)--params is ()
  point_signal_list={}
  points_list={}
  points_free_list={}
  compoent_execute_list={}
  compoent_list={}
  running=0
  islinking=0
  point_selected=0
  points_reset_state()
  setTimer(CWindow1,1001,0)
  setText(Window1,ProgramName)
  program_save_name=""
end procedure
setHandler( MenuItem_102, w32HClick, routine_id("MenuItem_102_onClick"))
#EndProc

#Control: MenuItem_103
AWindow : 1
X       : 0
Y       : 3
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Open
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_103_onClick (integer self, integer event, sequence params)--params is ()
  sequence fname

  fname=getOpenFileName(Window1,"",{ "Digital Simulator File", "*.des"})
  if length(fname)>0 then

    point_signal_list={}
    points_list={}
    points_free_list={}
    compoent_execute_list={}
    compoent_list={}
    running=0
    islinking=0
    point_selected=0



    if db_open(fname, DB_LOCK_NO) != DB_OK then

    end if

    if db_select_table("data") != DB_OK then
	  --myfatal("couldn't select table\n")
    end if
    points_list=db_record_data( db_find_key("points_list") )
    points_free_list=db_record_data( db_find_key("points_free_list") )
    compoent_list=db_record_data( db_find_key("compoent_list") )
    gpu_reset_bitmap()
    init_all_compoent()
    setTimer(CWindow1,1001,0)
    db_close()

    setText(Window1,ProgramName&" - "&get_file_name_part(fname))

    --ret = createEx( MenuItem, get_file_name_part(fname) , Level2Menu_recent, 0, 0, 0, 0, 0, 0 )

    program_save_name=fname
  end if
end procedure
setHandler( MenuItem_103, w32HClick, routine_id("MenuItem_103_onClick"))
#EndProc

#Control: Level2Menu_recent
AWindow : 1
X       : 0
Y       : 4
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Recent Files
Class   : Submenu
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1

#Control: MenuItem_131
AWindow : 1
X       : 0
Y       : 5
CX      : 0
CY      : 0
ControlLayer: 0
Title   : 
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1

#Control: MenuItem_104
AWindow : 1
X       : 0
Y       : 6
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Save
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Control: MenuItem_130
AWindow : 1
X       : 0
Y       : 7
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Save As
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_130_onClick (integer self, integer event, sequence params)--params is ()
  sequence fname
  integer fn
  fname=getSaveFileName(Window1,"",{ "Digital Simulator File", "*.des"})
  if length(fname)>0 then

      --get_file_ext_part()
      fname=get_file_path_part(fname)&get_file_name_part(fname)
      -- open or create the database
      if file_exsist(fname&".des") then
      	 ret=deleteFile(fname&".des")
      end if
	  if db_create(fname&".des", DB_LOCK_NO) != DB_OK then
	    --myfatal("Couldn't create database")
	  end if
	  if db_create_table("data") != DB_OK then
	    --myfatal("couldn't create table")
	  end if
	  if db_select_table("data") != DB_OK then
	    --myfatal("couldn't select table\n")
      end if

      -- insert new record
	  if db_insert("points_list", points_list) != DB_OK then
	    --myfatal("insert failed!\n")
	  end if
	  if db_insert("points_free_list", points_free_list) != DB_OK then
	    --myfatal("insert failed!\n")
	  end if
	  if db_insert("compoent_list", compoent_list) != DB_OK then
	    --myfatal("insert failed!\n")
	  end if
	
      db_close()

      setText(Window1,ProgramName&" - "&get_file_name_part(fname))

  end if
end procedure
setHandler( MenuItem_130, w32HClick, routine_id("MenuItem_130_onClick"))
#EndProc

#Control: MenuItem_132
AWindow : 1
X       : 0
Y       : 8
CX      : 0
CY      : 0
ControlLayer: 0
Title   : 
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1

#Control: MenuItem_139
AWindow : 1
X       : 0
Y       : 9
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Settings
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_139_onClick (integer self, integer event, sequence params)--params is ()
  openWindow(Window5,Modal)
end procedure
setHandler( MenuItem_139, w32HClick, routine_id("MenuItem_139_onClick"))
#EndProc

#Control: MenuItem_138
AWindow : 1
X       : 0
Y       : 10
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Display Info
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_138_onClick (integer self, integer event, sequence params)--params is ()
sequence msg
  msg={}
  getnumberofcom()
  for i=1 to length(com_list_info) do
  	msg&=com_list_info[i][1]&"  "&sprint(com_list_info[i][2])&"\n"
  end for
  show_message(msg)
end procedure
setHandler( MenuItem_138, w32HClick, routine_id("MenuItem_138_onClick"))
#EndProc

#Control: MenuItem_137
AWindow : 1
X       : 0
Y       : 11
CX      : 0
CY      : 0
ControlLayer: 0
Title   : 
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1

#Control: MenuItem_105
AWindow : 1
X       : 0
Y       : 12
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Exit
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_105_onClick (integer self, integer event, sequence params)--params is ()
  closeWindow(Window1)
end procedure
setHandler( MenuItem_105, w32HClick, routine_id("MenuItem_105_onClick"))
#EndProc

#Control: Menu_106
AWindow : 1
X       : 0
Y       : 13
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Add Component
Class   : Menu
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1

#Control: MenuItem_107
AWindow : 1
X       : 0
Y       : 14
CX      : 0
CY      : 0
ControlLayer: 0
Title   : And Gate
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_107_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( AndGate, mousex, mousey )
end procedure
setHandler( MenuItem_107, w32HClick, routine_id("MenuItem_107_onClick"))
#EndProc

#Control: MenuItem_110
AWindow : 1
X       : 0
Y       : 15
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Nand Gate
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_110_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( NandGate, mousex, mousey )
end procedure
setHandler( MenuItem_110, w32HClick, routine_id("MenuItem_110_onClick"))
#EndProc

#Control: MenuItem_115
AWindow : 1
X       : 0
Y       : 16
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Not Gate
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_115_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( NotGate, mousex, mousey )
end procedure
setHandler( MenuItem_115, w32HClick, routine_id("MenuItem_115_onClick"))
#EndProc

#Control: MenuItem_111
AWindow : 1
X       : 0
Y       : 17
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Or Gate
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_111_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( OrGate, mousex, mousey )
end procedure
setHandler( MenuItem_111, w32HClick, routine_id("MenuItem_111_onClick"))
#EndProc

#Control: MenuItem_112
AWindow : 1
X       : 0
Y       : 18
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Nor Gate
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_112_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( NorGate, mousex, mousey )
end procedure
setHandler( MenuItem_112, w32HClick, routine_id("MenuItem_112_onClick"))
#EndProc

#Control: MenuItem_113
AWindow : 1
X       : 0
Y       : 19
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Xor Gate
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_113_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( XorGate, mousex, mousey )
end procedure
setHandler( MenuItem_113, w32HClick, routine_id("MenuItem_113_onClick"))
#EndProc

#Control: MenuItem_114
AWindow : 1
X       : 0
Y       : 20
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Xnor Gate
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_114_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( XnorGate, mousex, mousey )
end procedure
setHandler( MenuItem_114, w32HClick, routine_id("MenuItem_114_onClick"))
#EndProc

#Control: MenuItem_108
AWindow : 1
X       : 0
Y       : 21
CX      : 0
CY      : 0
ControlLayer: 0
Title   : On Off Switch
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_108_onClick (integer self, integer event, sequence params)--params is ()
   ret=compoent_create( OnOffSwitch, mousex, mousey )
end procedure
setHandler( MenuItem_108, w32HClick, routine_id("MenuItem_108_onClick"))
#EndProc

#Control: MenuItem_109
AWindow : 1
X       : 0
Y       : 22
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Clock
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_109_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( Clock, mousex, mousey )
end procedure
setHandler( MenuItem_109, w32HClick, routine_id("MenuItem_109_onClick"))
#EndProc

#Control: MenuItem_116
AWindow : 1
X       : 0
Y       : 23
CX      : 0
CY      : 0
ControlLayer: 0
Title   : 7-Segment Display
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_116_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( SevenSegmentDisplay, mousex, mousey )
end procedure
setHandler( MenuItem_116, w32HClick, routine_id("MenuItem_116_onClick"))
#EndProc

#Control: MenuItem_117
AWindow : 1
X       : 0
Y       : 24
CX      : 0
CY      : 0
ControlLayer: 0
Title   : decade counter, decoder and driver
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_117_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( DecadeCounterDecoderDriver, mousex, mousey )
end procedure
setHandler( MenuItem_117, w32HClick, routine_id("MenuItem_117_onClick"))
#EndProc

#Control: MenuItem_118
AWindow : 1
X       : 0
Y       : 25
CX      : 0
CY      : 0
ControlLayer: 0
Title   : GPU and Display
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_118_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( GPU, mousex, mousey )
end procedure
setHandler( MenuItem_118, w32HClick, routine_id("MenuItem_118_onClick"))
#EndProc

#Control: MenuItem_120
AWindow : 1
X       : 0
Y       : 26
CX      : 0
CY      : 0
ControlLayer: 0
Title   : jk flip flop
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_120_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( JKflipflop, mousex, mousey )
end procedure
setHandler( MenuItem_120, w32HClick, routine_id("MenuItem_120_onClick"))
#EndProc

#Control: MenuItem_121
AWindow : 1
X       : 0
Y       : 27
CX      : 0
CY      : 0
ControlLayer: 0
Title   : 8 Bit Display
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_121_onClick (integer self, integer event, sequence params)--params is ()
   ret=compoent_create( BitDisplay, mousex, mousey )
end procedure
setHandler( MenuItem_121, w32HClick, routine_id("MenuItem_121_onClick"))
#EndProc

#Control: MenuItem_123
AWindow : 1
X       : 0
Y       : 28
CX      : 0
CY      : 0
ControlLayer: 0
Title   : 8 Bit Keypad
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_123_onClick (integer self, integer event, sequence params)--params is ()
   ret=compoent_create( BitKeyPad, mousex, mousey )
end procedure
setHandler( MenuItem_123, w32HClick, routine_id("MenuItem_123_onClick"))
#EndProc

#Control: MenuItem_124
AWindow : 1
X       : 0
Y       : 29
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Full Adder
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_124_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( FullAdder, mousex, mousey )
end procedure
setHandler( MenuItem_124, w32HClick, routine_id("MenuItem_124_onClick"))
#EndProc

#Control: MenuItem_133
AWindow : 1
X       : 0
Y       : 30
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Text Label
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_133_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( TextLable, mousex, mousey )
end procedure
setHandler( MenuItem_133, w32HClick, routine_id("MenuItem_133_onClick"))
#EndProc

#Control: MenuItem_136
AWindow : 1
X       : 0
Y       : 31
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Red Led
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_136_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( LedRed, mousex, mousey )
end procedure
setHandler( MenuItem_136, w32HClick, routine_id("MenuItem_136_onClick"))
#EndProc

#Control: MenuItem_140
AWindow : 1
X       : 0
Y       : 32
CX      : 0
CY      : 0
ControlLayer: 0
Title   : 8 Bit Register
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_140_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( Register8Bit, mousex, mousey )
end procedure
setHandler( MenuItem_140, w32HClick, routine_id("MenuItem_140_onClick"))
#EndProc

#Control: MenuItem_141
AWindow : 1
X       : 0
Y       : 33
CX      : 0
CY      : 0
ControlLayer: 0
Title   : 3 To 8 Decoder
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_141_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( Decoder3to8, mousex, mousey )
end procedure
setHandler( MenuItem_141, w32HClick, routine_id("MenuItem_141_onClick"))
#EndProc

#Control: MenuItem_142
AWindow : 1
X       : 0
Y       : 34
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Push Switch
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_142_onClick (integer self, integer event, sequence params)--params is ()
  ret=compoent_create( PushSwitch, mousex, mousey )
end procedure
setHandler( MenuItem_142, w32HClick, routine_id("MenuItem_142_onClick"))
#EndProc

#Control: MenuItem_143
AWindow : 1
X       : 0
Y       : 35
CX      : 0
CY      : 0
ControlLayer: 0
Title   : BCD to 7-segment display driver
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_106
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_143_onClick (integer self, integer event, sequence params)--params is ()
   ret=compoent_create( BcdTo7SegmentDisplay, mousex, mousey )
end procedure
setHandler( MenuItem_143, w32HClick, routine_id("MenuItem_143_onClick"))
#EndProc

#Control: Menu_125
AWindow : 1
X       : 0
Y       : 36
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Simulator
Class   : Menu
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1

#Control: MenuItem_127
AWindow : 1
X       : 0
Y       : 37
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Run Simulator Fast
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_125
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_127_onClick (integer self, integer event, sequence params)--params is ()
  points_reset_counter()
  point_signal_list={}
  simulator_delay=0
  running=1--not(running)
  run()
end procedure
setHandler( MenuItem_127, w32HClick, routine_id("MenuItem_127_onClick"))
#EndProc

#Control: MenuItem_129
AWindow : 1
X       : 0
Y       : 38
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Run Simulator Slow
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_125
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_129_onClick (integer self, integer event, sequence params)--params is ()
  points_reset_counter()
  point_signal_list={}
  simulator_delay=0.05
  running=1--not(running)
  run()
end procedure
setHandler( MenuItem_129, w32HClick, routine_id("MenuItem_129_onClick"))
#EndProc

#Control: MenuItem_128
AWindow : 1
X       : 0
Y       : 39
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Stop Simulator
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_125
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_128_onClick (integer self, integer event, sequence params)--params is ()
  points_reset_counter()
  point_signal_list={}
  simulator_delay=0
  running=0
  run()
end procedure
setHandler( MenuItem_128, w32HClick, routine_id("MenuItem_128_onClick"))
#EndProc

#Control: MenuItem_126
AWindow : 1
X       : 0
Y       : 40
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Reset States
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_125
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_126_onClick (integer self, integer event, sequence params)--params is ()
  integer class
  points_reset_state()
  intjkflipflop()
  intnorgate()

  for i=1 to length(compoent_list) do
	if length(compoent_list[i]) then
	  class=compoent_list[i][Class]
	  if class=DecadeCounterDecoderDriver then
	    compoent_list[i][DecadeCounterDecoderDriver_Count]  = 0
	    compoent_list[i][DecadeCounterDecoderDriver_Clocked]  = 0
	  elsif class=OnOffSwitch then
	  	compoent_list[i][OnOffSwitch_Input] = 0
	  elsif class=Clock then
	  	compoent_list[i][Clock_Input] = 0
	  elsif class=BitKeyPad then
	  	compoent_list[i][BitKeyPad_Value] = 0
	  elsif class=Register8Bit then
	  	compoent_list[i][Register8Bit_Value] = 0
	  end if
	end if
  end for
end procedure
setHandler( MenuItem_126, w32HClick, routine_id("MenuItem_126_onClick"))
#EndProc

#Control: Menu_134
AWindow : 1
X       : 0
Y       : 41
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Help
Class   : Menu
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1

#Control: MenuItem_135
AWindow : 1
X       : 0
Y       : 42
CX      : 0
CY      : 0
ControlLayer: 0
Title   : About
Class   : MenuItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Menu_134
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure MenuItem_135_onClick (integer self, integer event, sequence params)--params is ()
  openWindow(Window4,Modal)
end procedure
setHandler( MenuItem_135, w32HClick, routine_id("MenuItem_135_onClick"))
#EndProc

#Control: Popup_101
AWindow : 2
X       : 0
Y       : 1
CX      : 0
CY      : 0
ControlLayer: 0
Title   : compoent_popup
Class   : Popup
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1

#Control: PopupItem_102
AWindow : 2
X       : 0
Y       : 2
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Move
Class   : PopupItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Popup_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure PopupItem_102_onClick (integer self, integer event, sequence params)--params is ()
  compoent_popup_command=1
end procedure
setHandler( PopupItem_102, w32HClick, routine_id("PopupItem_102_onClick"))
#EndProc

#Control: PopupItem_103
AWindow : 2
X       : 0
Y       : 3
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Delete
Class   : PopupItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Popup_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure PopupItem_103_onClick (integer self, integer event, sequence params)--params is ()
  compoent_popup_command=2
end procedure
setHandler( PopupItem_103, w32HClick, routine_id("PopupItem_103_onClick"))
#EndProc

#Control: PopupItem_104
AWindow : 2
X       : 0
Y       : 4
CX      : 0
CY      : 0
ControlLayer: 0
Title   : Properties
Class   : PopupItem
Enabled : 1
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : Popup_101
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 0
TypStyle: 
ExStyle : 0
Local : 1
LastEditorEvent : 3

#Proc: onClick
procedure PopupItem_104_onClick (integer self, integer event, sequence params)--params is ()
  compoent_popup_command=3
end procedure
setHandler( PopupItem_104, w32HClick, routine_id("PopupItem_104_onClick"))
#EndProc

#Control: CWindow1
AWindow : 4
X       : 20
Y       : 40
CX      : 540
CY      : 270
ControlLayer: 0
Title   : CWindow1
Class   : CWindow
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
DefaultsClass : WS_SYSMENU
Style   : WS_CHILD, WS_CLIPSIBLINGS, WS_VSCROLL, WS_HSCROLL
TypStyle: w32or_all({...})
ExStyle : 0
Local : 1
LastEditorEvent : 12
OrigTitle : CWindow2

#Proc: onMouse
procedure CWindow1_onMouse (integer self, integer event, sequence params)--params is ( int event, int x, int y, int shift, int wheelmove )
  cwindow1_mouse(params[1],params[2],params[3])
end procedure
setHandler( CWindow1, w32HMouse, routine_id("CWindow1_onMouse"))
#EndProc

#Proc: onOpen
procedure CWindow1_onOpen (integer self, integer event, sequence params)--params is ()
  setTimer(CWindow1,1001,0)
end procedure
setHandler( CWindow1, w32HOpen, routine_id("CWindow1_onOpen"))
#EndProc

#Proc: onPaint
procedure CWindow1_onPaint (integer self, integer event, sequence params)--params is ( int x1, int y1, int x2, int y2 )
  setTimer(CWindow1,1001,0)
end procedure
setHandler( CWindow1, w32HPaint, routine_id("CWindow1_onPaint"))
#EndProc

#Proc: onScroll
procedure CWindow1_onScroll (integer self, integer event, sequence params)--params is ( int pos )
  cwindow1_scroll()
  cwindow1_paint()
end procedure
setHandler( CWindow1, w32HScroll, routine_id("CWindow1_onScroll"))
#EndProc

#Proc: onResize
procedure CWindow1_onResize (integer self, integer event, sequence params)--params is ( int style, int cx, int cy )
  cwindow1_resize()
end procedure
setHandler( CWindow1, w32HResize, routine_id("CWindow1_onResize"))
#EndProc

#Proc: onTimer
procedure CWindow1_onTimer (integer self, integer event, sequence params)--params is ( int timerId)
  if params[1]=1001 then--paint window
  	cwindow1_paint()
  	killTimer(CWindow1,1001)
  end if
end procedure
setHandler( CWindow1, w32HTimer, routine_id("CWindow1_onTimer"))
#EndProc

#Control: StatusBar1
AWindow : 6
X       : 0
Y       : 395
CX      : 640
CY      : 20
ControlLayer: 0
Title   : 
Class   : StatusBar
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
Local : 1
OutY : {{40},0.5,-1}
OrigTitle : StatusBar21

#Window 2
#TabInfo
TabText: Layer 0
TabRenamed: 0
TabNumber: 0
TabsetLayer: 0
#Control: Window2
X       : 30
Y       : 20
CX      : 280
CY      : 300
ControlLayer: 0
Title   : CPU Properties
Class   : Window
Enabled : 0
Checked : 0
Parent  : Window1
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
BkColor : 0
SystemBkColor : BTNFACE
EnableC : 1
DefaultsClass : WS_SYSMENU
Style   : WS_DLGFRAME, WS_SYSMENU
TypStyle: {...}
ExStyle : WS_EX_DLGMODALFRAME
Local : 1
LastEditorEvent : 1

#Proc: (General)
sequence pro_cpu_data
pro_cpu_data={}

addItem(List1,"mov")
addItem(List1,"add")
addItem(List1,"sub")
addItem(List1,"out")
#EndProc

#Proc: onOpen
procedure Window2_onOpen (integer self, integer event, sequence params)--params is ()
  centerwindow(Window2)
end procedure
setHandler( Window2, w32HOpen, routine_id("Window2_onOpen"))
#EndProc

#Control: LText41
AWindow : 30
X       : 50
Y       : 0
CX      : 170
CY      : 20
ControlLayer: 0
Title   :  6 bit opcode    13 bit arguments
Class   : LText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 10
Local : 1
OrigTitle : LText41

#Control: LText35
AWindow : 30
X       : 10
Y       : 20
CX      : 70
CY      : 20
ControlLayer: 0
Title   : Instruction:
Class   : LText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 4
Local : 1
OrigTitle : LText35

#Control: LText36
AWindow : 30
X       : 110
Y       : 20
CX      : 70
CY      : 20
ControlLayer: 0
Title   : Agument1:
Class   : LText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 5
Local : 1
OrigTitle : LText36

#Control: LText37
AWindow : 30
X       : 190
Y       : 20
CX      : 70
CY      : 20
ControlLayer: 0
Title   : Aguemnt 2:
Class   : LText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 6
Local : 1
OrigTitle : LText37

#Control: List1
AWindow : 30
X       : 10
Y       : 40
CX      : 90
CY      : 20
ControlLayer: 0
Title   : 
Class   : DropDownList
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 3
Local : 1
LastListHeight : 20
OrigTitle : List34

#Control: EditText1
AWindow : 30
X       : 110
Y       : 40
CX      : 70
CY      : 20
ControlLayer: 0
Title   : 
Class   : EditText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Numeric : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 7
Local : 1
OrigTitle : EditText38

#Control: EditText2
AWindow : 30
X       : 190
Y       : 40
CX      : 70
CY      : 20
ControlLayer: 0
Title   : 
Class   : EditText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Numeric : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 8
Local : 1
OrigTitle : EditText39

#Control: MleText1
AWindow : 30
X       : 10
Y       : 70
CX      : 250
CY      : 140
ControlLayer: 0
Title   : 
Class   : MleText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
ReadOnly: 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 9
Showcap : 1
Local : 1
OrigTitle : MleText40

#Control: PushButton31
AWindow : 30
X       : 10
Y       : 220
CX      : 100
CY      : 30
ControlLayer: 0
Title   : Insert Instruction
Class   : PushButton
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 2
Local : 1
LastEditorEvent : 3
OrigTitle : PushButton31

#Proc: onClick
procedure PushButton31_onClick (integer self, integer event, sequence params)--params is ()
  sequence indextext,text1,text2
  text1=getText(EditText1)
  text2=getText(EditText2)
  indextext=getItem(List1,getIndex(List1))

  pro_cpu_data=append(pro_cpu_data,{indextext,text1,text2})
  setText(MleText1,getText(MleText1)&indextext&" "&text1&" "&text2&"\n")
end procedure
setHandler( PushButton31, w32HClick, routine_id("PushButton31_onClick"))
#EndProc

#Control: PushButton29
AWindow : 30
X       : 120
Y       : 220
CX      : 140
CY      : 30
ControlLayer: 0
Title   : Close ,Save Changes
Class   : PushButton
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 1
Local : 1
LastEditorEvent : 3
OrigTitle : PushButton29

#Window 3
#TabInfo
TabText: Layer 0
TabRenamed: 0
TabNumber: 0
TabsetLayer: 0
#Control: Window3
X       : 0
Y       : 0
CX      : 259
CY      : 116
ControlLayer: 0
Title   : Text Label
Class   : Window
Enabled : 0
Checked : 0
Parent  : Window1
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
BkColor : 0
SystemBkColor : BTNFACE
EnableC : 1
DefaultsClass : WS_SYSMENU
Style   : WS_DLGFRAME, WS_SYSMENU
TypStyle: {...}
ExStyle : WS_EX_DLGMODALFRAME
Local : 1
LastEditorEvent : 13

#Proc: onOpen
procedure Window3_onOpen (integer self, integer event, sequence params)--params is ()
  centerwindow(Window3)
  setText(TextBox_text,compoent_list[compoent_popup_handle][TextName])
end procedure
setHandler( Window3, w32HOpen, routine_id("Window3_onOpen"))
#EndProc

#Control: LText64
AWindow : 30
X       : 10
Y       : 20
CX      : 50
CY      : 20
ControlLayer: 0
Title   : Caption:
Class   : LText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 4
Local : 1
OrigTitle : LText64

#Control: TextBox_text
AWindow : 30
X       : 60
Y       : 20
CX      : 180
CY      : 20
ControlLayer: 0
Title   : 
Class   : EditText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 1
Local : 1
OrigTitle : EditText61

#Control: PushButton62
AWindow : 30
X       : 30
Y       : 50
CX      : 90
CY      : 30
ControlLayer: 0
Title   : OK
Class   : PushButton
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 2
Local : 1
LastEditorEvent : 3
OrigTitle : PushButton62

#Proc: onClick
procedure PushButton62_onClick (integer self, integer event, sequence params)--params is ()
  sequence text
  text=getText(TextBox_text)
  if length(text) then
    compoent_list[compoent_popup_handle][TextName]=text  	
  end if
  closeWindow(Window3)
  setTimer(CWindow1,1001,0)
end procedure
setHandler( PushButton62, w32HClick, routine_id("PushButton62_onClick"))
#EndProc

#Control: PushButton63
AWindow : 30
X       : 150
Y       : 50
CX      : 90
CY      : 30
ControlLayer: 0
Title   : Cancel
Class   : PushButton
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 3
Local : 1
LastEditorEvent : 3
OrigTitle : PushButton63

#Proc: onClick
procedure PushButton63_onClick (integer self, integer event, sequence params)--params is ()
  closeWindow(Window3)
end procedure
setHandler( PushButton63, w32HClick, routine_id("PushButton63_onClick"))
#EndProc

#Window 4
#TabInfo
TabText: Layer 0
TabRenamed: 0
TabNumber: 0
TabsetLayer: 0
#Control: Window4
X       : 0
Y       : 0
CX      : 418
CY      : 330
ControlLayer: 0
Title   : About DES
Class   : Window
Enabled : 0
Checked : 0
Parent  : Window1
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
BkColor : 14811135
EnableC : 1
DefaultsClass : WS_SYSMENU
Style   : WS_POPUP
TypStyle: {...}
ExStyle : 0
Local : 1
LastEditorEvent : 1

#Proc: (General)
atom logo_bitmap
logo_bitmap=loadBitmapFromFile("images\\digital logo.bmp")
setBitmap(Bitmap66,logo_bitmap)
#EndProc

#Proc: onOpen
procedure Window4_onOpen (integer self, integer event, sequence params)--params is ()
  centerwindow(Window4)
end procedure
setHandler( Window4, w32HOpen, routine_id("Window4_onOpen"))
#EndProc

#Control: Bitmap66
AWindow : 30
X       : 50
Y       : 10
CX      : 310
CY      : 70
ControlLayer: 0
Title   : 
Class   : Bitmap
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 1
Local : 1
OrigTitle : Bitmap66

#Control: LText70
AWindow : 30
X       : 50
Y       : 80
CX      : 60
CY      : 20
ControlLayer: 0
Title   : Thanks to:
Class   : LText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 3
Local : 1
OrigTitle : LText70

#Control: LText71
AWindow : 30
X       : 100
Y       : 100
CX      : 150
CY      : 20
ControlLayer: 0
Title   : Robert Craig, for Euphoria.
Class   : LText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 4
Local : 1
OrigTitle : LText71

#Control: LText72
AWindow : 30
X       : 100
Y       : 120
CX      : 230
CY      : 20
ControlLayer: 0
Title   : David Cuny and Derek Parnell, for Win32Lib.
Class   : LText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 6
Local : 1
OrigTitle : LText72

#Control: LText73
AWindow : 30
X       : 100
Y       : 140
CX      : 170
CY      : 20
ControlLayer: 0
Title   : Judith Evans, for Enhanced IDE.
Class   : LText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 7
Local : 1
OrigTitle : LText73

#Control: LText74
AWindow : 30
X       : 100
Y       : 160
CX      : 260
CY      : 20
ControlLayer: 0
Title   : Davi Tassinari de Figueiredo, for Registry Wrappers.
Class   : LText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 8
Local : 1
OrigTitle : LText74

#Control: LText75
AWindow : 30
X       : 100
Y       : 180
CX      : 220
CY      : 20
ControlLayer: 0
Title   : The Internet, for Information On Electronics.
Class   : LText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 9
Local : 1
OrigTitle : LText75

#Control: LText77
AWindow : 30
X       : 100
Y       : 220
CX      : 210
CY      : 20
ControlLayer: 0
Title   : CopyRight: 12/july/2009  Vesion 1.0
Class   : LText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 2
Local : 1
OrigTitle : LText77

#Control: PushButton69
AWindow : 30
X       : 160
Y       : 260
CX      : 90
CY      : 30
ControlLayer: 0
Title   : OK
Class   : PushButton
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 5
Local : 1
LastEditorEvent : 3
OrigTitle : PushButton69

#Proc: onClick
procedure PushButton69_onClick (integer self, integer event, sequence params)--params is ()
  closeWindow(Window4)
  setTimer(CWindow1,1001,0)
end procedure
setHandler( PushButton69, w32HClick, routine_id("PushButton69_onClick"))
#EndProc

#Window 5
#TabInfo
TabText: Layer 0
TabRenamed: 0
TabNumber: 0
TabsetLayer: 0
#Control: Window5
X       : 0
Y       : 0
CX      : 235
CY      : 183
ControlLayer: 0
Title   : Settings
Class   : Window
Enabled : 0
Checked : 0
Parent  : Window1
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
BkColor : 0
SystemBkColor : BTNFACE
EnableC : 1
DefaultsClass : WS_SYSMENU
Style   : WS_DLGFRAME, WS_SYSMENU
TypStyle: {...}
ExStyle : WS_EX_DLGMODALFRAME
Local : 1
LastEditorEvent : 13

#Proc: onOpen
procedure Window5_onOpen (integer self, integer event, sequence params)--params is ()
  setCheck(Checkbox_snapgrid,grid_enable)
  setCheck(Checkbox_showgrid,grid_draw)
  setText(Textbox_gridsize,gridx)
  centerwindow(Window5)
end procedure
setHandler( Window5, w32HOpen, routine_id("Window5_onOpen"))
#EndProc

#Control: Checkbox_snapgrid
AWindow : 30
X       : 10
Y       : 10
CX      : 90
CY      : 20
ControlLayer: 0
Title   : Snap to Grid
Class   : CheckBox
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 1
Local : 1
OrigTitle : CheckBox81

#Control: Checkbox_showgrid
AWindow : 30
X       : 10
Y       : 40
CX      : 90
CY      : 20
ControlLayer: 0
Title   : Show Grid
Class   : CheckBox
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 3
Local : 1
OrigTitle : CheckBox82

#Control: LText84
AWindow : 30
X       : 10
Y       : 70
CX      : 40
CY      : 20
ControlLayer: 0
Title   : Size:
Class   : LText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 4
Local : 1
OrigTitle : LText84

#Control: Textbox_gridsize
AWindow : 30
X       : 50
Y       : 70
CX      : 50
CY      : 20
ControlLayer: 0
Title   : 
Class   : EditText
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Numeric : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 2
Local : 1
OrigTitle : EditText83

#Control: PushButton85
AWindow : 30
X       : 10
Y       : 110
CX      : 90
CY      : 30
ControlLayer: 0
Title   : OK
Class   : PushButton
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 5
Local : 1
LastEditorEvent : 3
OrigTitle : PushButton85

#Proc: onClick
procedure PushButton85_onClick (integer self, integer event, sequence params)--params is ()
  gridx=real(getText(Textbox_gridsize))
  gridy=gridx
  grid_enable=isChecked(Checkbox_snapgrid)
  grid_draw=isChecked(Checkbox_showgrid)
  closeWindow(Window5)
  setTimer(CWindow1,1001,0)
end procedure
setHandler( PushButton85, w32HClick, routine_id("PushButton85_onClick"))
#EndProc

#Control: PushButton86
AWindow : 30
X       : 120
Y       : 110
CX      : 90
CY      : 30
ControlLayer: 0
Title   : Cancel
Class   : PushButton
Enabled : 0
Checked : 0
Parent  : 
PClass  : 
SeqParentName  : 
SeqParentClass  : 
SeqChildName  : 
Visible : 1
EnableC : 1
Style   : 
TypStyle: 
ExStyle : 0
TabOrder : 6
Local : 1
LastEditorEvent : 3
OrigTitle : PushButton86

#Proc: onClick
procedure PushButton86_onClick (integer self, integer event, sequence params)--params is ()
  closeWindow(Window5)
end procedure
setHandler( PushButton86, w32HClick, routine_id("PushButton86_onClick"))
#EndProc

